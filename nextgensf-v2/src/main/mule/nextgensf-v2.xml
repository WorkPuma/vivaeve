<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" 
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" 
      xmlns:http="http://www.mulesoft.org/schema/mule/http" 
      xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce"
      xmlns:salesforce-pub-sub="http://www.mulesoft.org/schema/mule/salesforce-pub-sub"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
        http://www.mulesoft.org/schema/mule/salesforce-pub-sub http://www.mulesoft.org/schema/mule/salesforce-pub-sub/current/mule-salesforce-pub-sub.xsd">

  <!-- HTTP listener configuration to receive from API layer -->
  <http:listener-config name="Inbound-Listener-Config" doc:name="HTTP Listener config" basePath="/">
    <http:listener-connection host="0.0.0.0" port="${app.port}" />
  </http:listener-config>
  
  <!-- Teams webhook HTTP request configuration -->
  <http:request-config name="Teams-Webhook-Config" doc:name="Teams Webhook Config">
    <http:request-connection host="${secure::teams.webhook.host}" port="443" protocol="HTTPS" />
  </http:request-config>
  
  <!-- Salesforce connection configuration -->
  <salesforce:sfdc-config name="Salesforce-Config" doc:name="Salesforce Config">
		<salesforce:oauth-user-pass-connection 
      consumerKey="${secure::salesforce.consumerKey}"
      consumerSecret="${secure::salesforce.consumerSecret}"
      username="${secure::salesforce.username}"
      password="${secure::salesforce.password}"
      tokenEndpoint="${secure::salesforce.tokenEndpoint}" />
  
</salesforce:sfdc-config>
  
  <!-- Configuration properties -->
  <configuration-properties file="config.properties" />
  
  <!-- Teams Error Notification Sub-Flow -->
  <salesforce-pub-sub:pubsub-config name="Salesforce_PubSub_Config" doc:name="Salesforce PubSub Config" doc:id="d7b408f4-7797-4afd-b111-e80c2127b0f9" >
		<salesforce-pub-sub:oauth-user-pass-connection 
      consumerKey="${secure::salesforce.pubsub.consumerKey}"
      consumerSecret="${secure::salesforce.pubsub.consumerSecret}"
      username="${secure::salesforce.pubsub.username}"
      password="${secure::salesforce.pubsub.password}"
      tokenEndpoint="${secure::salesforce.pubsub.tokenEndpoint}" />
	</salesforce-pub-sub:pubsub-config>
	<sub-flow name="send-teams-error-notification" doc:id="4653536f-9fe1-429d-92ef-c884f6723dac">
    <ee:transform doc:name="Build Teams Message" doc:id="dc5e9afa-96e3-4107-8c48-0c94ffa7a02a">
      <ee:message>
        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  "type": "AdaptiveCard",
  "version": "1.4",
  "\$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
  "body": [
    {
      "type": "TextBlock",
      "text": "HL7 Integration Error",
      "weight": "Bolder",
      "size": "Large",
      "color": "Attention",
      "wrap": true
    },
    {
      "type": "TextBlock",
      "text": "An error occurred while processing an HL7 message.",
      "wrap": true
    },
    {
      "type": "FactSet",
      "facts": [
        {
          "title": "Error Message:",
          "value": vars.errorMessage default "Unknown error"
        },
        {
          "title": "Message Type:",
          "value": vars.messageType default "Unknown"
        },
        {
          "title": "Correlation ID:",
          "value": vars.correlationId default correlationId
        },
        {
          "title": "Timestamp:",
          "value": now() as String {format: "yyyy-MM-dd HH:mm:ss"}
        },
        {
          "title": "Environment:",
          "value": p('mule.env') default "Unknown"
        }
      ]
    },
    {
      "type": "TextBlock",
      "text": "Please investigate this error in the application logs.",
      "wrap": true,
      "isSubtle": true
    }
  ],
  "actions": [
    {
      "type": "Action.OpenUrl",
      "title": "View Logs",
      "url": "https://your-logging-system.example.com"
    }
  ]
}
]]></ee:set-payload>
      </ee:message>
    </ee:transform>
    
    <http:request method="POST" doc:name="Send to Teams" config-ref="Teams-Webhook-Config"
      path="/workflows/a7dc7cdf16444d9c952b305876471885/triggers/manual/paths/invoke">
      <http:headers><![CDATA[#[{'Content-Type': 'application/json'}]]]></http:headers>
      <http:query-params><![CDATA[
        {
          'api-version': '2016-06-01',
          'sp': '/triggers/manual/run',
          'sv': '1.0',
          'sig': '${secure::teams.webhook.sig}'
        }
      ]]></http:query-params>
    </http:request>
    
    <logger level="INFO" doc:name="Log Teams Notification Sent" 
            message="Teams error notification sent successfully" />
  </sub-flow>
  
  <!-- Main inbound HL7 processing flow -->
  <flow name="inbound-hl7-processing-flow" doc:id="13a85dab-806c-4356-aa4d-1a3c0ff4b18c">
    <http:listener doc:name="HL7 Inbound Listener" 
                   config-ref="Inbound-Listener-Config" 
                   path="/api/nextgenemr" 
                   allowedMethods="POST"/>
    
    <!-- Log incoming HL7 message -->
    <logger level="INFO" doc:name="Log Incoming HL7" 
            message="INCOMING HL7 MESSAGE: #[payload]" />
    
    <!-- Parse HL7 message and extract message type -->
    <ee:transform doc:name="Parse HL7 Headers" doc:id="e4e6df7c-8466-424a-9ad2-56a89abe6907">
      <ee:message>
        <ee:set-payload><![CDATA[%dw 2.0
output application/java
import * from dw::core::Strings

var hl7Text = payload as String
var segments = hl7Text splitBy /\r|\n|\s(?=PID|MSH|PV1|GT1|IN1)/
var mshSegment = segments[0]
var mshFields = mshSegment splitBy "|"

var messageType = mshFields[8]
var eventType = messageType splitBy "^"
var messageCode = eventType[0]
var triggerEvent = eventType[1]

---
{
  originalHL7: hl7Text,
  segments: segments,
  messageType: messageCode,
  triggerEvent: triggerEvent,
  fullMessageType: messageType
}]]></ee:set-payload>
      </ee:message>
      <ee:variables>
        <ee:set-variable variableName="messageType"><![CDATA[%dw 2.0
output application/java
var mshSegment = (payload as String splitBy /\r|\n|\s(?=PID|MSH|PV1|GT1|IN1)/)[0]
var mshFields = mshSegment splitBy "|"
var messageType = mshFields[8]
var eventType = messageType splitBy "^"
---
eventType[0] ++ "^" ++ eventType[1] default ""]]></ee:set-variable>
        <ee:set-variable variableName="triggerEvent"><![CDATA[%dw 2.0
output application/java
var mshSegment = (payload as String splitBy /\r|\n|\s(?=PID|MSH|PV1|GT1|IN1)/)[0]
var mshFields = mshSegment splitBy "|"
var messageType = mshFields[8]
var eventType = messageType splitBy "^"
---
eventType[1] default ""]]></ee:set-variable>
      </ee:variables>
    </ee:transform>
    
    <!-- Route by message type -->
    <choice doc:name="Route by Message Type">
      <!-- ADT Messages (Patient Registration/Updates) -->
      <when expression="#[vars.messageType == 'ADT^A04' or vars.messageType == 'ADT^A08']">
        <flow-ref doc:name="Process ADT Message" name="process-adt-message-flow"/>
      </when>
      
      <!-- SIU Messages (Scheduling) -->
      <when expression="#[vars.messageType startsWith 'SIU^S']">
        <flow-ref doc:name="Process SIU Message" name="process-siu-message-flow"/>
      </when>
      
      <otherwise>
        <logger level="WARN" doc:name="Unsupported Message Type" 
                message="Unsupported HL7 message type: #[vars.messageType]"/>
        <ee:transform doc:name="Set Error Response">
          <ee:message>
            <ee:set-payload><![CDATA[%dw 2.0
output text/plain
---
"MSH|^~\&|FORESTHMS|FORESTHMS^1266378|HEALTHFUSION^1266378|NEXTGENOFFICE^1266378|" ++
(now() as String {format:"yyyyMMddHHmmss"}) ++
"||ACK^" ++ payload.triggerEvent ++ "|" ++ uuid() ++ "|P|2.3" ++
"\rMSA|AE|" ++ uuid() ++ "|Unsupported message type|"]]></ee:set-payload>
          </ee:message>
        </ee:transform>
        <set-variable variableName="httpStatus" value="400" doc:name="Set Error Status"/>
      </otherwise>
    </choice>
    
    <!-- Return ACK on success -->
    <ee:transform doc:name="Create ACK Response">
      <ee:message>
        <ee:set-payload><![CDATA[%dw 2.0
output text/plain
---
"MSH|^~\&|FORESTHMS|FORESTHMS^1266378|HEALTHFUSION^1266378|NEXTGENOFFICE^1266378|" ++
(now() as String {format:"yyyyMMddHHmmss"}) ++
"||ACK^" ++ (vars.triggerEvent default "") ++ "|" ++ uuid() ++ "|P|2.3" ++
"\rMSA|AA|" ++ uuid() ++ "|Message processed successfully|"
]]></ee:set-payload>
      </ee:message>
    </ee:transform>
    <set-variable variableName="httpStatus" value="200" doc:name="Set Success Status"/>
    
    <error-handler>
      <on-error-continue enableNotifications="true" logException="true">
        <logger level="ERROR" doc:name="Log Error" 
                message="Error processing HL7 message: #[error.description]"/>
        
        <!-- Set error variables for Teams notification -->
        <set-variable variableName="errorMessage" value="#[error.description]" doc:name="Set Error Message"/>
        
        <!-- Send Teams notification -->
        <flow-ref doc:name="Send Teams Error Notification" name="send-teams-error-notification"/>
        
        <ee:transform doc:name="Create NACK Response">
          <ee:message>
            <ee:set-payload><![CDATA[%dw 2.0
output text/plain
---
"MSH|^~\&|FORESTHMS|FORESTHMS^1266378|HEALTHFUSION^1266378|NEXTGENOFFICE^1266378|" ++
(now() as String {format:"yyyyMMddHHmmss"}) ++
"||ACK^" ++ (vars.triggerEvent default "") ++ "|" ++ uuid() ++ "|P|2.3" ++
"\rMSA|AE|" ++ uuid() ++ "|Error processing message: " ++ error.description ++ "|"
]]></ee:set-payload>
          </ee:message>
        </ee:transform>
        <set-variable variableName="httpStatus" value="500" doc:name="Set Error Status"/>
      </on-error-continue>
    </error-handler>
  </flow>
  
  <!-- ADT Message Processing Flow -->
  <flow name="process-adt-message-flow" doc:id="64b9b2ce-5edc-4882-accc-c4b1bbb61d16">
    <ee:transform doc:name="Parse ADT Message to Contact Event" doc:id="09cd8e4a-d48e-45d3-8b07-293c8e488182">
      <ee:message>
        <ee:set-payload><![CDATA[%dw 2.0
output application/json
import * from dw::core::Strings

var hl7Text = payload.originalHL7
var segments = hl7Text splitBy /\r|\n|\s(?=PID|MSH|PV1|GT1|IN1)/
var pidSegment = (segments filter (s) -> startsWith(s, "PID"))[0] default ""
var pidFields = pidSegment splitBy "|"
var nameField = (pidFields[5] default "") splitBy "^"
var addressField = (pidFields[11] default "") splitBy "^"
var phoneEmailField = (pidFields[13] default "") splitBy "^"
---
[{
  Event_Type__c: payload.triggerEvent,
  HealthFusion_Patient_Record_ID__c: 
    if ((pidFields[3] default "") != "")
      "HF" ++ (pidFields[3] default "")
    else
      "",
  FirstName__c: (nameField[1] default ""),
  LastName__c: (nameField[0] default ""),
  MiddleName__c: (nameField[2] default ""),
  Email__c: (phoneEmailField[3] default ""),
  Phone__c: (phoneEmailField[0] default ""),
  MailingStreet__c: (addressField[0] default ""),
  MailingCity__c: (addressField[2] default ""),
  MailingState__c: (addressField[3] default ""),
  MailingPostalCode__c: (addressField[4] default ""),
  Date_of_Birth__c: 
    if ((pidFields[7] default "") != "" and sizeOf(pidFields[7]) >= 8)
      (
        ((pidFields[7][0 to 3] ++ "-" ++ pidFields[7][4 to 5] ++ "-" ++ pidFields[7][6 to 7]) ++ "T00:00:00Z")
        as DateTime {format: "yyyy-MM-dd'T'HH:mm:ssX"} 
        as Number {unit: "milliseconds"}
      )
    else
      null,
  Patient_Gender__c: (pidFields[8] default ""),
  Patient_Race__c: (pidFields[10] default ""),
  Patient_Ethnicity__c: (pidFields[22] default ""),
  Language__c: (pidFields[15] default ""),
  CreatedDate: now() as Number {unit: "milliseconds"},
  CreatedById: "005Rj00000Fzk3mIAB"
}]
]]></ee:set-payload>
      </ee:message>
    </ee:transform>
    <logger level="INFO" doc:name="Log Contact Event Payload" message="Publishing Contact__e event: #[payload]" />
    <salesforce-pub-sub:publish-event doc:name="Publish event" doc:id="e5e9974d-cf97-4c81-aa7d-b128d823510d" config-ref="Salesforce_PubSub_Config" topic="/event/Contact__e"/>
    <logger level="INFO" doc:name="Log Contact Event Published" 
            message="Contact platform event published: #[payload.Contact__e]"/>
    
    <error-handler>
      <on-error-continue enableNotifications="true" logException="true">
        <logger level="ERROR" doc:name="Log ADT Error" 
                message="Error processing ADT message: #[error.description]"/>
        
        <!-- Set error variables for Teams notification -->
        <set-variable variableName="errorMessage" value="#[error.description]" doc:name="Set ADT Error Message"/>
        
        <!-- Send Teams notification -->
        <flow-ref doc:name="Send Teams Error Notification" name="send-teams-error-notification"/>
        
        <!-- Re-throw error to be handled by main flow -->
        <raise-error type="APP:ADT_PROCESSING_ERROR" description="#[error.description]"/>
      </on-error-continue>
    </error-handler>
  </flow>
  
  <!-- SIU Message Processing Flow -->
  <flow name="process-siu-message-flow" doc:id="50d24947-bf04-47ae-a46d-797bfeb24926">
    <ee:transform doc:name="Parse SIU Message to Service Appointment Event" doc:id="c4104467-7556-4fd5-afd8-1f71605498c0">
      <ee:message>
        <ee:set-payload><![CDATA[%dw 2.0
output application/json
import * from dw::core::Strings

var hl7Text = payload.originalHL7
var segments = hl7Text splitBy /\r|\n|\s(?=PID|MSH|PV1|GT1|IN1|SCH|AIL|AIP)/
var schSegment = (segments filter (s) -> startsWith(s, "SCH"))[0] default ""
var pidSegment = (segments filter (s) -> startsWith(s, "PID"))[0] default ""
var ailSegment = (segments filter (s) -> startsWith(s, "AIL"))[0] default ""
var aipSegment = (segments filter (s) -> startsWith(s, "AIP"))[0] default ""

// Parse SCH fields
var schFields = schSegment splitBy "|"
var appointmentId = (schFields[2] splitBy "^")[0] default ""
var appointmentReason = (schFields[7] splitBy "^")[0] default ""
var appointmentType = (schFields[8] splitBy "^")[0] default ""
var duration = schFields[9] default ""
var durationType = schFields[10] default ""
var timingField = schFields[11] splitBy "^"
var startTime = timingField[3] default ""
var endTime = timingField[4] default ""
var providerField = schFields[16] splitBy "^"
var providerNpi = providerField[0] default ""
var providerLastName = providerField[1] default ""
var providerFirstName = providerField[2] default ""
var status = schFields[25] default ""

// Parse PID fields (for patient info)
var pidFields = pidSegment splitBy "|"
var patientId = (pidFields[4] splitBy "^")[0] default ""
var nameField = (pidFields[5] default "") splitBy "^"
var patientLastName = nameField[0] default ""
var patientFirstName = nameField[1] default ""
var dobField = pidFields[7] default ""
var genderField = pidFields[8] default ""
var phoneEmailField = (pidFields[13] default "") splitBy "^"
var patientPhone = phoneEmailField[0] default ""
var patientEmail = phoneEmailField[3] default ""
var addressField = (pidFields[11] default "") splitBy "^"
var patientStreet = addressField[0] default ""
var patientCity = addressField[2] default ""
var patientState = addressField[3] default ""
var patientZip = addressField[4] default ""

// Parse AIL fields (location)
var ailFields = ailSegment splitBy "|"
var locationField = (ailFields[3] default "") splitBy "^"
var locationId = locationField[0] default ""
var locationName = locationField[3] default ""

// Format gender
var genderFormatted = if (upper(genderField) == "M") "Male" 
                     else if (upper(genderField) == "F") "Female" 
                     else genderField
---
[{
  Event_Type__c: payload.triggerEvent,
  NextGen_ID__c: appointmentId,
  Placer_Appointment_ID__c: appointmentId,
  Appointment_Type__c: appointmentType,
  Appointment_Reason__c: appointmentReason,
  Appointment_Status__c: if (status != "") status else null,
  Duration_Value__c: if (duration != "") duration else null,
  Start_DateTime__c: 
    if (startTime != "" and sizeOf(startTime) >= 14)
      ((startTime[0 to 3] ++ "-" ++ startTime[4 to 5] ++ "-" ++ startTime[6 to 7] ++ "T" ++ startTime[8 to 9] ++ ":" ++ startTime[10 to 11] ++ ":" ++ startTime[12 to 13] ++ "Z") as DateTime {format: "yyyy-MM-dd'T'HH:mm:ssX"} as Number {unit: "milliseconds"})
    else
      null,
  End_DateTime__c: 
    if (endTime != "" and sizeOf(endTime) >= 14)
      ((endTime[0 to 3] ++ "-" ++ endTime[4 to 5] ++ "-" ++ endTime[6 to 7] ++ "T" ++ endTime[8 to 9] ++ ":" ++ endTime[10 to 11] ++ ":" ++ endTime[12 to 13] ++ "Z") as DateTime {format: "yyyy-MM-dd'T'HH:mm:ssX"} as Number {unit: "milliseconds"})
    else
      null,
  // Patient Information
  Patient_ID__c: if (patientId != "" and not startsWith(patientId, "HF")) "HF" ++ patientId else patientId,
  Patient_First_Name__c: if (patientFirstName != "") patientFirstName else null,
  Patient_Last_Name__c: if (patientLastName != "") patientLastName else null,
  Patient_DOB__c: 
    if (dobField != "" and sizeOf(dobField) >= 8)
      (
        ((dobField[0 to 3] ++ "-" ++ dobField[4 to 5] ++ "-" ++ dobField[6 to 7]) ++ "T00:00:00Z")
        as DateTime {format: "yyyy-MM-dd'T'HH:mm:ssX"} 
        as Number {unit: "milliseconds"}
      )
    else
      null,
  Patient_Gender__c: if (genderFormatted != "") genderFormatted else null,
  Patient_Phone__c: if (patientPhone != "") patientPhone else null,
  Email__c: if (patientEmail != "") patientEmail else null,
  Patient_Street__c: if (patientStreet != "") patientStreet else null,
  Patient_City__c: if (patientCity != "") patientCity else null,
  Patient_State__c: if (patientState != "") patientState else null,
  Patient_Zip__c: if (patientZip != "") patientZip else null,
  Patient_Language__c: (pidFields[15] default ""),
  // Provider Information
  Provider_NPI__c: if (providerNpi != "") providerNpi else null,
  Provider_First_Name__c: if (providerFirstName != "") providerFirstName else null,
  Provider_Last_Name__c: if (providerLastName != "") providerLastName else null,
  Provider_Type__c: (schFields[17] default ""),
  // Location Information
  Location_ID__c: if (locationId != "") locationId else null,
  Location_Name__c: if (locationName != "") locationName else null,
  // Required by Pub/Sub
  CreatedDate: now() as Number {unit: "milliseconds"},
  CreatedById: "005Rj00000Fzk3mIAB"
}]
]]></ee:set-payload>
      </ee:message>
    </ee:transform>
    
    <logger level="INFO" doc:name="Log SIU Event Payload" message="Publishing NextGenServiceAppointment__e event: #[payload]" />
    <salesforce-pub-sub:publish-event doc:name="Publish event" doc:id="2a179085-6b21-4941-ace8-f558bb53f187" config-ref="Salesforce_PubSub_Config" topic="/event/NextGenServiceAppointment__e"/>
    
    <logger level="INFO" doc:name="Log Service Appointment Event Published" 
            message="Service Appointment platform event published: #[payload.NextGenServiceAppointment__e]"/>
    
    <error-handler>
      <on-error-continue enableNotifications="true" logException="true">
        <logger level="ERROR" doc:name="Log SIU Error" 
                message="Error processing SIU message: #[error.description]"/>
        
        <!-- Set error variables for Teams notification -->
        <set-variable variableName="errorMessage" value="#[error.description]" doc:name="Set SIU Error Message"/>
        
        <!-- Send Teams notification -->
        <flow-ref doc:name="Send Teams Error Notification" name="send-teams-error-notification"/>
        
        <!-- Re-throw error to be handled by main flow -->
        <raise-error type="APP:SIU_PROCESSING_ERROR" description="#[error.description]"/>
      </on-error-continue>
    </error-handler>
  </flow>
</mule>