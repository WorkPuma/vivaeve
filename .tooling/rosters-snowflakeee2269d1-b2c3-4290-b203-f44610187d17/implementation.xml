<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:snowflake="http://www.mulesoft.org/schema/mule/snowflake"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:os="http://www.mulesoft.org/schema/mule/os" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:s3="http://www.mulesoft.org/schema/mule/s3" xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/snowflake http://www.mulesoft.org/schema/mule/snowflake/current/mule-snowflake.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd">
	<sftp:config name="Bamboo_Health_SFTP_Config" doc:name="SFTP Config" doc:id="0586b042-8c75-418d-8656-3a300889de1d" >
		<sftp:connection host="${bambooHealth.sftp.host}" port="${bambooHealth.sftp.port}" username="${secure::bambooHealth.sftp.username}" password="${secure::bambooHealth.sftp.password}" workingDir="${bambooHealth.sftp.workingDirectory}"/>
	</sftp:config>
	<s3:config name="Amazon_S3_Configuration" doc:name="Amazon S3 Configuration" doc:id="7d2aaaff-846c-45cd-9137-2a47cfdd74b8" >
		<s3:connection accessKey="${aws.accessKeyId}" secretKey="${aws.secretKey}" />
	</s3:config>
	<snowflake:snowflake-config name="Snowflake_Config" doc:name="Snowflake Config" doc:id="f6792122-0ace-47b6-bc6e-684a368cb9ee" >
		<snowflake:snowflake-connection accountName="${aws.snowflake.accountName}" warehouse="HERSELF_DEFAULT_XSMALL" database="${aws.snowflake.database}" schema="${aws.snowflake.schema}" user="${secure::aws.snowflake.user}" password="${secure::aws.snowflake.password}" />
	</snowflake:snowflake-config>
	<sftp:config name="Minnesota_ADT_SFTP_Config" doc:name="SFTP Config" doc:id="d32e1e90-dac8-4334-b2b4-33ed5e2a7452" >
		<sftp:connection workingDir="${minnesotaAdt.sftp.workingDirectory}" host="${minnesotaAdt.sftp.host}" username="${secure::minnesotaAdt.sftp.username}" password="${secure::minnesotaAdt.sftp.password}" port="${minnesotaAdt.sftp.port}"/>
	</sftp:config>
	<flow name="MainFlow" doc:id="f6ada275-a4d7-4bf8-9e33-11d2b2270376" maxConcurrency="1">
		<scheduler doc:name="Execute at 2 AM Central Time" doc:id="73b2d4a0-400a-43fb-8124-13de86fc57f8" >
			<scheduling-strategy >
				<cron expression="0 0 2 * * ?" timeZone="CST" />
			</scheduling-strategy>
		</scheduler>
		<choice doc:name="Build Minnesota ADT Roster?" doc:id="dba1fb2e-aa94-420c-a86f-874793f42fb6" >
			<when expression="#[%dw 2.0&#10;import p from Mule&#10;output application/json&#10;&#10;var minnesotaAdtParameter = p('minnesotaadt')&#10;&#10;---&#10;if (isEmpty(minnesotaAdtParameter) or (!isEmpty(minnesotaAdtParameter) and lower(minnesotaAdtParameter as String) == &quot;true&quot;))&#10;	true&#10;else&#10;	false]">
				<try doc:name="Try" doc:id="98d506fb-fa4f-4164-b8e0-0a2cb231104e">
					<set-variable value="MinnesotaADT" doc:name="Set the rosterName variable to MinnesotaADT" doc:id="2dc1d721-c3e6-4b14-a593-9fba964aceb3" variableName="rosterName" />
			<set-variable value="#[%dw 2.0&#10;import p from Mule&#10;---&#10;&quot;$(p('aws.s3.minnesotaAdtBucket'))&quot;]" doc:name="Set the s3Bucket to MinnesotaADT" doc:id="1d084bd0-9f86-4d3a-91ae-c78d98235c80" variableName="s3Bucket" />
			<flow-ref doc:name="Build the Minnesota ADT Roster" doc:id="77c48e65-602f-4991-af4f-be83e6d73d33" name="BuildRoster" />
			<error-handler>
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="daeca509-080e-4e12-95fa-8890602e3129">
					<ee:transform doc:name="Create Error Message" doc:id="de6e09a5-185e-4d37-b488-adb5421392cf">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
	message: "An error occurred while building the Minnesota ADT roster: $(error.description)"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
					<logger level="INFO" doc:name="An error occurred while building the Minnesota ADT roster: [ErrorDescription]" doc:id="3681dbf4-2650-409f-ab83-ab8d89d22916" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : payload&#10;}]'/>
					<remove-variable doc:name="Release csvPatients Variable from Memory" doc:id="cff10794-0c6f-471d-b99c-dd9562d5e187" variableName="csvPatients" />
					<remove-variable doc:name="release processedPatientIds variable from memory" doc:id="a8d84a04-7615-4d3c-851b-8bafdd1a88bd" variableName="processedPatientIds" />
				</on-error-continue>
			</error-handler>
		</try>
			</when>
		</choice>
		<choice doc:name="Build the Bamboo Health Roster?" doc:id="71293110-8001-4698-a43f-100326640fc9" >
			<when expression="#[%dw 2.0&#10;import p from Mule&#10;output application/json&#10;&#10;var bambooHealthParameter = p('bamboohealth')&#10;&#10;---&#10;if (isEmpty(bambooHealthParameter) or (!isEmpty(bambooHealthParameter) and lower(bambooHealthParameter as String) == &quot;true&quot;))&#10;	true&#10;else&#10;	false]">
				<try doc:name="Try" doc:id="80bd8914-9d48-4caf-a102-c75ae56a2b3a">
					<set-variable value="BambooHealth" doc:name="Set the rosterName variable to BambooHealth" doc:id="fa202c32-95ff-42e7-8349-bb9d563f8a62" variableName="rosterName" />
			<set-variable value="#[%dw 2.0&#10;import p from Mule&#10;---&#10;&quot;$(p('aws.s3.bambooHealthBucket'))&quot;]" doc:name="Set the s3Bucket to BambooHealth" doc:id="7ec1673d-58b6-41bb-9cc1-4c901a3fa349" variableName="s3Bucket" />
			<flow-ref doc:name="Build the BambooHealth Roster" doc:id="f91fb577-913d-4fd9-9ec4-63dba48150e3" name="BuildRoster" />
			<error-handler>
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="921a1436-aac5-4691-97f3-f640b3608799">
					<ee:transform doc:name="Create Error Message" doc:id="d5f14583-053f-435b-92d3-3f9d13ef19ab">
						<ee:message>
							<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
	message: "An error occurred while building the Bamboo Health roster: $(error.description)"
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<logger level="INFO" doc:name="An error occurred while building the Bamboo Health roster: [ErrorDescription]" doc:id="ef8ddcd2-0d6d-4909-8be0-a5b9e51efa36" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : payload&#10;}]'/>
					<remove-variable doc:name="Release csvPatients Variable from Memory" doc:id="eb99aefd-f697-4278-8936-89a7c306ed69" variableName="csvPatients" />
					<remove-variable doc:name="release processedPatientIds variable from memory" doc:id="037224db-90cd-4668-b636-29a1b245daec" variableName="processedPatientIds" />
				</on-error-continue>
			</error-handler>
		</try>
			</when>
		</choice>
		<error-handler ref="globalError_Handler" />
	

</flow>
	<sub-flow name="BuildRoster" doc:id="b9c69cf5-f297-4fb0-bda6-dd7df69368ac" >
		<logger level="INFO" doc:name="Starting push of Elation Roster to [rosterName]..." doc:id="757bea92-57e7-4f1a-890b-da08054a2347" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "Starting push of Elation Roster to $(vars.rosterName)..."&#10;}]'/>
		<flow-ref doc:name="SelectPatientsFromSnowflake" doc:id="09380340-fcae-4590-a3df-724625f63f4e" name="SelectPatientsFromSnowflake"/>
		<choice doc:name="Are there any patients?" doc:id="2be2baa0-f395-4860-adee-f69e3daf4680">
			<when expression="#[sizeOf(payload) == 0]">
				<logger level="INFO" doc:name="No patients found to process" doc:id="3d244088-8b2d-4523-aecc-a9317a08b4c7" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "No patients found to process"&#10;}]'/>
			
</when>
			<otherwise>
				<set-variable value="#[now()]" doc:name="Record the start DateTime into a variable" doc:id="09a6a3cd-747e-49d7-96f5-abea60fd764a" variableName="startDateTime" doc:description="Some test notes right here"/>
				<set-variable value="#[[]]" doc:name="Initialize the csvPatients variable to store the CSV formatted data" doc:id="ec9d22a6-c47b-42e7-aa99-cb2cf250debd" variableName="csvPatients" />
				<set-variable value="#[sizeOf(payload)]" doc:name="Store the total number of patients retrieved from snowflake into a variable" doc:id="ab04c58b-a4f2-463f-8ea3-2f94b01b79ab" variableName="totalPatients" />
				<logger level="INFO" doc:name="Got [totalPatients] patients from Snowflake for [rosterName]" doc:id="5324e794-2279-4683-be3e-6ea73b7f34be" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "Got $(vars.totalPatients default "") patients from Snowflake for $(vars.rosterName)"&#10;}]'/>
				<set-variable value="#[[]]" doc:name="Initialize the processedPatientIds array for duplication checking and logging" doc:id="ed0e6b58-a811-4679-9215-57f3c681b9ac" variableName="processedPatientIds"/>
				<foreach doc:name="For Each Patient" doc:id="965c0ca9-17d2-404b-b52e-d48e6c207813" collection="#[payload]">
			<try doc:name="Try" doc:id="4e2daf93-78f7-42fe-a85c-8fd5a3131682" >
						<set-variable value="#[payload.elationPatientId]" doc:name="Store the Elation PatientId into a variable so it is available for error logging" doc:id="d4b287bc-d81c-4774-9349-34c492dd986c" variableName="elationPatientId"/>
						<set-variable value='#[%dw 2.0&#10;import validateMinnesotaADTPatient from dw::com::herselfhealth::snowflakerosters::SnowflakeRosterBm&#10;import validateBambooHealthPatient from dw::com::herselfhealth::snowflakerosters::SnowflakeRosterBm&#10;&#10;output application/java&#10;---&#10;if (vars.rosterName == "MinnesotaADT")&#10;	validateMinnesotaADTPatient(payload, vars.processedPatientIds default [])&#10;else if (vars.rosterName == "BambooHealth")&#10;	validateBambooHealthPatient(payload, vars.processedPatientIds default [])&#10;else&#10;	[]]' doc:name="Get Validation Errors" doc:id="c30835dc-0eb5-4c99-8eff-e1aa8a9ff8ea" variableName="validationErrors"/>
						<choice doc:name="Are there any non warning validation errors?" doc:id="91b870a9-aa82-4efd-adcc-595141c980f7" >
							<when expression="#[%dw 2.0&#10;output application/java&#10;---&#10;!isEmpty(vars.validationErrors filter ((value, index) -&gt; (value.isWarning == false)))]">
								<logger level="INFO" doc:name="[rosterName] validation failed for patient [elationPatientId] because [validationErrors]. The record will not be included in the roster file." doc:id="38cd9131-1f06-4df3-be0e-fec9bb27079f" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "$(vars.rosterName) validation failed for patient $(vars.elationPatientId default "") because $(vars.validationErrors.Error default [] joinBy ","). The record will not be included in the roster file."&#10;}]'/>
							
</when>
							<otherwise >
								<ee:transform doc:name="Transform the Snowflake data for this patient into the required CSV format" doc:id="689042a3-d3d6-4739-971b-3efcb50ae215">
				<ee:message>
					<ee:set-payload><![CDATA[%dw 2.0
import mapMinnesotaADTPatient from dw::com::herselfhealth::snowflakerosters::SnowflakeRosterBm
import mapBambooHealthPatient from dw::com::herselfhealth::snowflakerosters::SnowflakeRosterBm

output application/csv header=true, separator=",", quoteValues=true
---
if (vars.rosterName == "MinnesotaADT")
	mapMinnesotaADTPatient(payload)
else if (vars.rosterName == "BambooHealth")
	mapBambooHealthPatient(payload)
else
	null]]></ee:set-payload>
				</ee:message>
			</ee:transform>
								<set-variable value='#[%dw 2.0&#10;output application/csv header=true, separator=",", quoteValues=true&#10;---&#10;(vars.csvPatients default []) ++ payload]' doc:name="Add the transformed data into the CSV data set" doc:id="09adf951-3e25-4093-bb0c-4bc56ca2d94d" variableName="csvPatients" />
								<set-variable value="#[%dw 2.0&#10;output application/json&#10;---&#10;vars.processedPatientIds ++ [vars.elationPatientId]]" doc:name="Add the elationPatientId to the processedPatientIds array" doc:id="e5712df4-c7d3-418f-bf30-010c16a2f2c7" variableName="processedPatientIds" />
								<choice doc:name="Choice" doc:id="f8e476c2-8d01-4cdc-b817-b1e15845b24a" >
									<when expression="#[%dw 2.0&#10;output application/java&#10;---&#10;!isEmpty(vars.validationErrors)]">
										<logger level="INFO" doc:name="[rosterName} validation warning for patient [elationPatientId] because [validationErrors]. The record will still be included in the roster file." doc:id="53618218-a879-4855-9164-252032065f6c" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "$(vars.rosterName) validation warning for patient $(vars.elationPatientId default "") because $(vars.validationErrors.Error default [] joinBy ","). The record will still be included in the roster file."&#10;}]'/>
									
</when>
								</choice>
							</otherwise>
						</choice>
						<error-handler >
							<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="a1de91a9-463a-4071-b62f-d2425d6e5d59" >
								<ee:transform doc:name="Create the error message" doc:id="863815a6-a6c7-4ceb-872c-45d5c468881d" >
									<ee:message >
										<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	message: "An error occurred while processing Elation patient $(vars.elationPatientId default ""): $(error.description default "")"
}]]></ee:set-payload>
									</ee:message>
								</ee:transform>
								<logger level="INFO" doc:name="An error occurred while processing Elation patient [elationPatientId]: [errorDescripton]" doc:id="9930314d-b18e-42d9-b621-326b8f54d6c0" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;	"RosterName": vars.rosterName,&#10;    "LogMessage" : payload&#10;}]'/>
							
</on-error-continue>
						</error-handler>
					</try>
				
</foreach>
				<logger level="INFO" doc:name="Finished creating [rosterName] csv. [totalProcessedPatients] of [totalRetrievedPatients] patients were processed." doc:id="17d79359-f698-4754-80dc-d2a39cc7451f" message='#[%dw 2.0&#10;&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "Finished creating $(vars.rosterName) csv. $(sizeOf(vars.processedPatientIds) default "") of $(vars.totalPatients default "") patients were processed."&#10;}]'/>
				<flow-ref doc:name="SaveRosterToAwsS3" doc:id="6e36a334-c412-489f-8e09-483eed51b6c1" name="SaveRosterToAwsS3" />
				<flow-ref doc:name="SendRosterToSftp" doc:id="43581847-0d22-4cd9-8acd-7585cfcff308" name="SendRosterToSftp"/>
				<logger level="INFO" doc:name="...finished push of Elation Roster to [rosterName]" doc:id="0b832796-295f-4fc6-b509-d2c684083f1e" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "...finished push of Elation Roster to $(vars.rosterName)"&#10;}]'/>
				<remove-variable doc:name="Release totalPatients variable from memory" doc:id="99a07a26-41f1-4002-a4f5-8a006bdda898" variableName="totalPatients" />
				<remove-variable doc:name="release csvPatients data from memory" doc:id="deb5173f-2cff-46e9-b942-243bddd6e039" variableName="csvPatients"/>
				<remove-variable doc:name="release startDateTime data from memory" doc:id="68cb983f-18f6-476b-9c34-99affcc5e41f" variableName="startDateTime"/>
				<remove-variable doc:name="release validationErrors variable from memory" doc:id="5ea4de18-0c31-4001-a1a1-f68e4ac68049" variableName="validationErrors"/>
				<remove-variable doc:name="release processedPatientIds variable from memory" doc:id="08bc04a3-03bc-40e1-8ef0-c15af6497c65" variableName="processedPatientIds"/>
				<remove-variable doc:name="Release elationPatientId variable from memory" doc:id="576c3039-0ee0-4cc3-8114-a40e44e33e6a" variableName="elationPatientId"/>
			



</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="SaveRosterToAwsS3" doc:id="3a5f238f-a2bc-4389-8a08-f15725d5ac4c" >
		<try doc:name="Try" doc:id="c21d605e-7bcf-4b2d-8bfc-c9d8706a72a5" >
			<set-variable value="#[&quot;herselfhealth_$(vars.startDateTime as String { format: &quot;MM-dd-yyyy'T'HH:mm:ss'Z'&quot;}).csv&quot;]" doc:name="Initialie the filename variable" doc:id="463df5c4-b798-437d-85c3-7993262a7f1e" variableName="filename" />
			<logger level="INFO" doc:name="Saving copy of [filename] to AWS S3 [bucket]..." doc:id="4e7336d2-0c50-41d5-8757-2506e343b139" message='#[%dw 2.0&#10;import p from Mule&#10;&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "Saving copy of $(vars.filename default "") to AWS S3 $(vars.s3Bucket default "")..."&#10;}]'/>
			<s3:put-object doc:name="Save the CSV Roster In S3" doc:id="ddefb32a-bb30-4404-8d84-6869dd06905c" config-ref="Amazon_S3_Configuration" bucketName="#[vars.s3Bucket]" key="#[vars.filename]" contentLength="#[sizeOf(vars.csvPatients.^raw)]">
			<reconnect count="3" />
			<s3:content><![CDATA[#[vars.csvPatients]]]></s3:content>
		
</s3:put-object>
			<logger level="INFO" doc:name="...Saved copy of [filename] to AWS S3 [bucket]" doc:id="2968087e-1b14-49b9-aa0e-028d39de6025" message='#[%dw 2.0&#10;import p from Mule&#10;&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "...Saved copy of $(vars.filename default "") to AWS S3 $(vars.s3Bucket default "")"&#10;}]'/>
			<remove-variable doc:name="Release the filename variable from memory" doc:id="e48c974a-173a-4533-903c-59a016751078" variableName="filename" />
			<error-handler >
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="21d9abbf-ad35-468b-8e20-9137d30148a9" >
					<ee:transform doc:name="Create the Error Message" doc:id="533de25e-f1d6-4089-9e2f-fb6589aa6118" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	message: "An error occurred while saving the roster to S3 bucket $(vars.s3Bucket): $(error.description default "")"
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<logger level="INFO" doc:name="An error occurred while saving the roster to S3 bucket [s3Bucket]: [ErrorDescription]" doc:id="e0cb3026-1bd3-420f-8984-9eed495e8a48" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : payload&#10;}]'/>
				</on-error-continue>
			</error-handler>
		</try>
	

</sub-flow>
	<sub-flow name="SelectPatientsFromSnowflake" doc:id="d6806baf-2d6f-46c7-998c-dc45919465b5" >
		<choice doc:name="ExecuteQueryPerRosterName" doc:id="125330a7-1324-4965-bab1-8deaf78db3e3" >
			<when expression='#[vars.rosterName == "MinnesotaADT"]'>
				<snowflake:select doc:name="Select From Minnesota ADT View" doc:id="a6e186ab-c9f3-481c-9f5c-0243e80b5a9b" config-ref="Snowflake_Config">
					<snowflake:sql ><![CDATA[SELECT *
FROM MN_EAS_ROSTER]]></snowflake:sql>
				</snowflake:select>
				<ee:transform doc:name="Transform Snowflake Results to JSON Array for Minnesota ADT" doc:id="e6536a43-53ad-49eb-a0f2-9db0f1a98b02" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload map 
{
	"elationPatientId": $.PATIENT_ID,
	"firstName": $.FIRST_NAME,
	"middleName": $.MIDDLE_NAME,
	"lastName": $.LAST_NAME,
	"dateOfBirth": $.BIRTHDATE,
	"sex": $.GENDER,
	"addressLine1": $.ADDRESS_1,
	"addressLine2": $.ADDRESS_2,
	"city": $.CITY,
	"state": $.STATE,
	"zip": $.ZIP,
	"homePhone": $.HOME_PHONE,
	"cellPhone": $.CELL_PHONE,
	"memberStatus": $.MEMBER_STATUS,
	"mco": $.MCO,
	"careManager": $.CARE_MANAGER,
	"careProgram": $.CARE_PROGRAM
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<when expression='#[vars.rosterName == "BambooHealth"]'>
				<snowflake:select doc:name="Select From Bamboo Health View" doc:id="013920dc-08b5-40a7-bbe2-a8e345884540" config-ref="Snowflake_Config">
					<snowflake:sql ><![CDATA[SELECT PATIENT_ID,
PATIENT_FIRST_NAME,
PATIENT_LAST_NAME,
PATIENT_DOB,
PATIENT_GENDER,
PATIENT_ADDRESS_1,
PATIENT_ADDRESS_2,
PATIENT_ADDRESS_CITY,
PATIENT_ADDRESS_STATE,
PATIENT_ADDRESS_ZIP,
PATIENT_PHONE_MOBILE,
PATIENT_PHONE_HOME,
ATTRIBUTED_PROVIDER_FIRST_NAME_1,
ATTRIBUTED_PROVIDER_LAST_NAME_1,
ATTRIBUTED_PROVIDER_HONORIFICS_1,
ATTRIBUTED_PROVIDER_NPI_1,
INSURANCE_NUMBER_1,
INSURER_1,
INSURANCE_NUMBER_2,
INSURER_2
FROM BAMBOO_ROSTER]]></snowflake:sql>
				</snowflake:select>
				<ee:transform doc:name="Transform Snowflake Results to JSON Array for Bamboo Health" doc:id="7c39e860-5cd9-41ec-a149-281f36a7ff73" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload map 
{
	"elationPatientId": $.PATIENT_ID,
	"firstName": $.PATIENT_FIRST_NAME,
	"lastName": $.PATIENT_LAST_NAME,
	"dateOfBirth": $.PATIENT_DOB,
	"sex": $.PATIENT_GENDER,
	"addressLine1": $.PATIENT_ADDRESS_1,
	"addressLine2": $.PATIENT_ADDRESS_2,
	"city": $.PATIENT_ADDRESS_CITY,
	"state": $.PATIENT_ADDRESS_STATE,
	"zip": $.PATIENT_ADDRESS_ZIP,
	"cellPhone": $.PATIENT_PHONE_MOBILE,
	"homePhone": $.PATIENT_PHONE_HOME,
	"providerFirstName1": $.ATTRIBUTED_PROVIDER_FIRST_NAME_1,
	"providerLastName1": $.ATTRIBUTED_PROVIDER_LAST_NAME_1,
	"providerHonorifics1": $.ATTRIBUTED_PROVIDER_HONORIFICS_1,
	"providerNpi1": $.ATTRIBUTED_PROVIDER_NPI_1,
	"insuranceNumber1": $.INSURANCE_NUMBER_1,
	"insurer1": $.INSURER_1,
	"insuranceNumber2": $.INSURANCE_NUMBER_2,
	"insurer2": $.INSURER_2
}	]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			
</when>
		</choice>
	</sub-flow>
	<sub-flow name="SendRosterToSftp" doc:id="f36729c6-b042-4e67-aef4-d2cc9cdad048" >
		<choice doc:name="Process SFTP per requirements" doc:id="38100016-9582-47b6-9540-4d76d29c2988" >
			<when expression='#[vars.rosterName == "BambooHealth"]'>
				<choice doc:name="Is the environment production?" doc:id="b248f25a-1d60-42c0-b009-a398cad0501a" >
					<when expression="#[%dw 2.0&#10;import p from Mule&#10;output application/json&#10;---&#10;(lower(p('env') as String)) == &quot;prod&quot;]">
						<set-variable value='#["herselfhealth_$((vars.startDateTime &gt;&gt; "CST") as String { format: "MMddyyyy"}).csv"]' doc:name="Set the filename for SFTP" doc:id="b00ba878-f6ed-438a-97f7-fead406aa0ca" variableName="filename" />
						<logger level="INFO" doc:name="Publishing to sftp for [rosterName]. Saving [filename] to [sftp host]..." doc:id="1fecc42a-a334-4e5e-bfc8-66d30a0e9292" message="#[%dw 2.0&#10;import p from Mule&#10;&#10;output application/json&#10;---&#10;{&#10;	&quot;AppName&quot;: app.name,&#10;	&quot;FlowName&quot; : flow.name,&#10;    &quot;LogMessage&quot; : &quot;Publishing to sftp for $(vars.rosterName). Saving $(vars.filename default &quot;&quot;) to $(p('bambooHealth.sftp.host'))...&quot;&#10;}]"/>
						<sftp:write doc:name="Save CSV to Bamboo Health SFTP Sever" doc:id="5ac8bd0b-560e-410d-9269-e4276826dfe5" config-ref="Bamboo_Health_SFTP_Config" path="#[vars.filename]" createParentDirectories="false">
			<reconnect frequency="10000" count="5" />
			<sftp:content><![CDATA[#[vars.csvPatients]]]></sftp:content>
		
</sftp:write>
						<logger level="INFO" doc:name="...[filename] saved to [sftp host] for [rosterName]" doc:id="215e42bc-3bc6-4f02-a66b-57f6ca401f5c" message="#[%dw 2.0&#10;import p from Mule&#10;&#10;output application/json&#10;---&#10;{&#10;	&quot;AppName&quot;: app.name,&#10;	&quot;FlowName&quot; : flow.name,&#10;    &quot;LogMessage&quot; : &quot;...$(vars.filename default &quot;&quot;) saved to $(p('bambooHealth.sftp.host')) for $(vars.rosterName)&quot;&#10;}]"/>
						<remove-variable doc:name="release filename variable from memory" doc:id="ec627871-1b8a-44b8-bee2-69ded8def603" variableName="filename" />
					
</when>
				</choice>
			</when>
			
			
						<when expression='#[vars.rosterName == "MinnesotaADT"]'>
				<choice doc:name="Is the environment production?" doc:id="6f1a6255-d0cb-4467-a811-94b5f1319dce" >
					<when expression="#[%dw 2.0&#10;import p from Mule&#10;output application/json&#10;---&#10;(lower(p('env') as String)) == &quot;prod&quot;]">
						<set-variable value='#["HERHLTH_P_$((vars.startDateTime &gt;&gt; "CST") as String { format: "yyyyMMdd"}).csv"]' doc:name="Set the filename for SFTP" doc:id="9fa64663-f23d-4d5f-96bb-f3b8a86cf3d1" variableName="filename" />
						<logger level="INFO" doc:name="Publishing to sftp for [rosterName]. Saving [filename] to [sftp host]..." doc:id="802468f2-cef7-4c21-9e1e-30e1fd28b200" message="#[%dw 2.0&#10;import p from Mule&#10;&#10;output application/json&#10;---&#10;{&#10;	&quot;AppName&quot;: app.name,&#10;	&quot;FlowName&quot; : flow.name,&#10;    &quot;LogMessage&quot; : &quot;Publishing to sftp for $(vars.rosterName). Saving $(vars.filename default &quot;&quot;) to $(p('minnesotaAdt.sftp.host'))...&quot;&#10;}]"/>
						<sftp:write doc:name="Save CSV to Minnesota ADT SFTP Sever" doc:id="936725aa-607b-407c-9b35-4144c65e17d6" config-ref="Minnesota_ADT_SFTP_Config" path="#[vars.filename]" createParentDirectories="false">
			<reconnect frequency="10000" count="5" />
			<sftp:content><![CDATA[#[vars.csvPatients]]]></sftp:content>
		
</sftp:write>
						<logger level="INFO" doc:name="...[filename] saved to [sftp host] for [rosterName]" doc:id="585c4a67-8631-472c-b592-f7b42429e12d" message="#[%dw 2.0&#10;import p from Mule&#10;&#10;output application/json&#10;---&#10;{&#10;	&quot;AppName&quot;: app.name,&#10;	&quot;FlowName&quot; : flow.name,&#10;    &quot;LogMessage&quot; : &quot;...$(vars.filename default &quot;&quot;) saved to $(p('minnesotaAdt.sftp.host')) for $(vars.rosterName)&quot;&#10;}]"/>
						<remove-variable doc:name="release filename variable from memory" doc:id="c6f57d28-8a20-45f7-b535-cab989122f3c" variableName="filename" />
					
</when>
				</choice>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Roster not saved to SFTP for[rosterName]" doc:id="f2f7bd30-0f18-4239-a960-dd2daba72226" message='#[%dw 2.0&#10;import p from Mule&#10;&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "Roster not saved to SFTP for $(vars.rosterName)"&#10;}]'/>
			
</otherwise>
		</choice>
	
</sub-flow>
</mule>
