<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" 
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" 
      xmlns:file="http://www.mulesoft.org/schema/mule/file" 
      xmlns:http="http://www.mulesoft.org/schema/mule/http" 
      xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce" 
      xmlns:salesforce-pub-sub="http://www.mulesoft.org/schema/mule/salesforce-pub-sub" 
      xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      xmlns:os="http://www.mulesoft.org/schema/mule/os" 
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
        http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
        http://www.mulesoft.org/schema/mule/salesforce-pub-sub http://www.mulesoft.org/schema/mule/salesforce-pub-sub/current/mule-salesforce-pub-sub.xsd
        http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
        http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd">
  
  <!-- Object store configuration -->
  <os:object-store name="Object_store" doc:name="Object store" doc:id="55e027a0-70fd-4e97-bfce-3fdc27bdeeda" />
  
  <!-- HTTP listener configuration -->
  <http:listener-config name="Listener-config" doc:name="HTTP Listener config" basePath="/">
    <http:listener-connection host="0.0.0.0" port="8081" />
  </http:listener-config>
  
  <!-- Salesforce Pub/Sub configuration -->
  <salesforce-pub-sub:pubsub-config name="Pubsub-config" doc:name="Salesforce PubSub Config">
    <salesforce-pub-sub:oauth-user-pass-connection consumerKey="${salesforce.pubsub.consumerKey}" consumerSecret="${salesforce.pubsub.consumerSecret}" username="${salesforce.pubsub.username}" password="${salesforce.pubsub.password}" tokenEndpoint="${salesforce.pubsub.tokenEndpoint}" />
  </salesforce-pub-sub:pubsub-config>
  
  <!-- SFTP configuration -->
  <sftp:config name="SFTP_Config" doc:name="SFTP Config" doc:id="9f7c4ec7-6cca-42f0-b928-e6e55a857432">
    <sftp:connection host="sftp.prod.ngo.nextgenaws.net" 
                    username="foresthms" 
                    password="E7aipaPHV9hf9p3b76Nh"
                    workingDir="/"
                    connectionTimeout="30000"
                    responseTimeout="60000">
        <pooling-profile 
            maxActive="5" 
            maxIdle="2" 
            initialisationPolicy="INITIALISE_ONE" 
            exhaustedAction="WHEN_EXHAUSTED_WAIT" 
            maxWait="30000"/>
    </sftp:connection>
  </sftp:config>
  
  <!-- ObjectStore configuration -->
  <os:config name="ObjectStore_Config" doc:name="ObjectStore Config" doc:id="720a116f-1631-400f-aedd-ed9762252524" />
  
  <!-- Configuration properties -->
  <configuration-properties file="config.properties" />
  
  <!-- First flow: Contact__e processing -->
  <flow name="sfnextgen-v2Flow" doc:id="569a12c5-1665-4513-9f26-005d78ba61d1">
    <salesforce-pub-sub:subscribe-channel-listener doc:name="Subscribe channel listener" doc:id="40cbd672-9934-4c39-9ef4-b25b6e23244f" config-ref="Pubsub-config" channelName="/event/Contact__e">
      <salesforce-pub-sub:replay-option>
        <salesforce-pub-sub:latest />
      </salesforce-pub-sub:replay-option>
    </salesforce-pub-sub:subscribe-channel-listener>
    <choice doc:name="Route by Update_Source__c">
      <when expression="#[(payload.event.Update_Source__c default null) == null or (payload.event.Update_Source__c default null) == 'NextGen Office']">
        <logger level="INFO" doc:name="Skip Salesforce Event" message="Skipped event with Update_Source__c: #[payload.event.Update_Source__c]" />
      </when>
      <otherwise>
        <ee:transform doc:name="Ensure Update_Source__c">
          <ee:message>
            <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  event: payload.event ++ {
    Update_Source__c: (payload.event.Update_Source__c default null) as String default "NextGen Office"
  },
  eventId: payload.eventId,
  replayId: payload.replayId
}
]]></ee:set-payload>
          </ee:message>
        </ee:transform>
        <set-variable variableName="correlationId" value="#[uuid()]" />
        <logger level="INFO" doc:name="Log Platform Event Payload" message="INCOMING PLATFORM EVENT PAYLOAD (correlationId: #[vars.correlationId]): #[write(payload, 'application/json')]" />
        <set-variable variableName="sentToNextgen" value="${sent.to.nextgen}" doc:name="Set sentToNextgen" />
        <choice doc:name="Route by EventType__c">
          <when expression="#[payload.event.Event_Type__c == 'A04']">
            <ee:transform doc:name="To HL7 ADT^A04">
              <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output text/plain
import buildADT_A04 from dwl::hl7::adt
---
buildADT_A04(payload.event)
              ]]></ee:set-payload>
              </ee:message>
            </ee:transform>
            <logger level="INFO" doc:name="HL7 Message Logger" message="HL7 MESSAGE GENERATED (correlationId: #[vars.correlationId]):&#10;#[payload]" />
            <set-variable variableName="filename" value="#['ADT04_' ++ uuid() ++ '.hl7']" doc:name="Set HL7 Filename" />
            <set-variable variableName="hl7FilePath" value="#['C:\\Users\\ychri\\Desktop\\foresthms\\toNGO\\ADT\\' ++ vars.filename]" doc:name="Set HL7 File Path" />
            <file:write doc:name="Write HL7 to File" path="#[vars.hl7FilePath]" />
            <logger level="INFO" doc:name="SFTP Connection Start" message="Connecting to SFTP for ADT upload: #[vars.filename]" />
            <logger level="INFO" doc:name="SFTP Upload Start" message="Uploading ADT HL7 to SFTP: #[vars.filename]" />
            <until-successful maxRetries="1" millisBetweenRetries="1000">
              <sftp:write doc:name="Upload ADT HL7 to SFTP" config-ref="SFTP_Config" path="#['/foresthms/toNGO/ADT/' ++ vars.filename]">
                <sftp:content><![CDATA[#[payload]]]></sftp:content>
              </sftp:write>
            </until-successful>
            <logger level="INFO" doc:name="SFTP Upload Success" message="Successfully uploaded ADT HL7 to SFTP: #[vars.filename]" />
            <choice doc:name="NextGen Switch">
              <when expression="#[vars.sentToNextgen]">
                <logger level="INFO" doc:name="NextGen Outbound" message="Sending HL7 message to NextGen API, switch is ON (correlationId: #[vars.correlationId])" />
                <until-successful maxRetries="3" millisBetweenRetries="1000">
                  <logger level="INFO" doc:name="HL7 body to NextGen" message="HL7 body to NextGen: #[payload]" />
                  <ee:transform doc:name="Fix HL7 Endlines">
                    <ee:message>
                      <ee:set-payload><![CDATA[
%dw 2.0
output text/plain
---
trim(payload as String)
  replace "\r\n" with "\r"
  replace "\n" with "\r"
                      ]]></ee:set-payload>
                    </ee:message>
                  </ee:transform>
                </until-successful>
                <!-- Outbound flow would go here. Add HTTP request or call as needed. -->
              </when>
              <otherwise>
                <logger level="INFO" doc:name="NextGen Outbound" message="Not sending HL7 message to NextGen API, switch is OFF. HL7 message was logged to console only." />
              </otherwise>
            </choice>
          </when>
          <when expression="#[payload.event.Event_Type__c == 'A08']">
            <ee:transform doc:name="To HL7 ADT^A08">
              <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output text/plain
import buildADT_A08 from dwl::hl7::adt
---
buildADT_A08(payload.event)
              ]]></ee:set-payload>
              </ee:message>
            </ee:transform>
            <logger level="INFO" doc:name="HL7 Message Logger" message="HL7 MESSAGE GENERATED (correlationId: #[vars.correlationId]):&#10;#[payload]" />
            <set-variable variableName="filename" value="#['ADT08_' ++ uuid() ++ '.hl7']" doc:name="Set HL7 Filename" />
            <set-variable variableName="hl7FilePath" value="#['C:\\Users\\ychri\\Desktop\\foresthms\\toNGO\\ADT\\' ++ vars.filename]" doc:name="Set HL7 File Path" />
            <file:write doc:name="Write HL7 to File" path="#[vars.hl7FilePath]" />
            <logger level="INFO" doc:name="SFTP Connection Start" message="Connecting to SFTP for ADT upload: #[vars.filename]" />
            <logger level="INFO" doc:name="SFTP Upload Start" message="Uploading ADT HL7 to SFTP: #[vars.filename]" />
            <until-successful maxRetries="1" millisBetweenRetries="1000">
              <sftp:write doc:name="Upload ADT HL7 to SFTP" config-ref="SFTP_Config" path="#['/foresthms/toNGO/ADT/' ++ vars.filename]">
                <sftp:content><![CDATA[#[payload]]]></sftp:content>
              </sftp:write>
            </until-successful>
            <logger level="INFO" doc:name="SFTP Upload Success" message="Successfully uploaded ADT HL7 to SFTP: #[vars.filename]" />
            <choice doc:name="NextGen Switch">
              <when expression="#[vars.sentToNextgen]">
                <logger level="INFO" doc:name="NextGen Outbound" message="Sending HL7 message to NextGen API, switch is ON (correlationId: #[vars.correlationId])" />
                <until-successful maxRetries="3" millisBetweenRetries="1000">
                  <logger level="INFO" doc:name="HL7 body to NextGen" message="HL7 body to NextGen: #[payload]" />
                  <logger level="INFO" doc:name="DEBUG Payload Structure" message="DEBUG payload at DW: #[payload]" />
                  <ee:transform doc:name="Fix HL7 Endlines">
                    <ee:message>
                      <ee:set-payload><![CDATA[
%dw 2.0
output text/plain
---
(trim(payload as String)
  replace "\r\n" with "\r"
  replace "\n" with "\r")
                      ]]></ee:set-payload>
                    </ee:message>
                  </ee:transform>
                </until-successful>
                <!-- Outbound flow would go here. Add HTTP request or call as needed. -->
              </when>
              <otherwise>
                <logger level="INFO" doc:name="NextGen Outbound" message="Not sending HL7 message to NextGen API, switch is OFF. HL7 message was logged to console only." />
              </otherwise>
            </choice>
          </when>
          <otherwise>
            <logger doc:name="Unknown EventType - Skipped" level="WARN" message="Skipped payload, unknown EventType: #[payload.event.Event_Type__c]" />
          </otherwise>
        </choice>
      </otherwise>
    </choice>
    <error-handler>
      <on-error-propagate type="ANY">
        <set-variable variableName="errorMessage" value="#[(error.description)]" />
        <set-variable variableName="exceptionMessage" value="#[(error.errorMessage)]" />
        <set-variable variableName="exceptionType" value="#[(error.errorType)]" />
        <set-variable variableName="exceptionStackTrace" value="#[(error.stackTrace)]" />
        <set-variable variableName="originLocation" value="#[(flow.name)]" />
        <set-variable variableName="apiName" value="sfnextgen-v2" />
        <set-variable variableName="actionName" value="#[(attributes.method)]" />
        <set-variable variableName="httpRequestUrl" value="#[(attributes.requestPath)]" />
        <set-variable variableName="httpRequestMethod" value="#[(attributes.method)]" />
        <set-variable variableName="httpRequestHeaders" value="#[(attributes.headers)]" />
        <set-variable variableName="httpRequestBody" value="#[(payload)]" />
        <set-variable variableName="httpResponseStatusCode" value="#[(attributes.statusCode)]" />
        <set-variable variableName="httpResponseStatus" value="#[(attributes.reasonPhrase)]" />
        <set-variable variableName="httpResponseHeaders" value="#[(attributes.headers)]" />
        <set-variable variableName="httpResponseBody" value="#[(payload)]" />
        <set-variable variableName="sourceIp" value="#[(attributes.remoteAddress)]" />
        <flow-ref name="publish-logentryevent-error" />
        <logger level="ERROR" message="Error in HL7 flow, correlationId: #[vars.correlationId], error: #[error.description]" />
        <file:write path="deadletter/#[vars.correlationId].err" />
      </on-error-propagate>
    </error-handler>
  </flow>

  <!-- Second flow: NextGenServiceAppointment__e SIU Handler -->
  <flow name="NextGenServiceAppointment__e_SIU">
    <salesforce-pub-sub:subscribe-channel-listener doc:name="Subscribe NextGenServiceAppointment__e" config-ref="Pubsub-config" channelName="/event/NextGenServiceAppointment__e">
      <salesforce-pub-sub:replay-option>
        <salesforce-pub-sub:latest />
      </salesforce-pub-sub:replay-option>
    </salesforce-pub-sub:subscribe-channel-listener>
    <set-variable variableName="correlationId" value="#[uuid()]" />
    <logger level="INFO" doc:name="Log NextGenServiceAppointment__e Payload" message="INCOMING NEXTGEN SERVICE APPOINTMENT (correlationId: #[vars.correlationId]): #[write(payload, 'application/json')]" />
    <set-variable variableName="sentToNextgen" value="${sent.to.nextgen}" doc:name="Set sentToNextgen" />
    <choice doc:name="Route by Update_Source__c">
      <when expression="#[(payload.event.Update_Source__c default null) == null or (payload.event.Update_Source__c default null) == 'NextGen Office']">
        <logger level="INFO" doc:name="Skip Salesforce Event" message="Skipped event with Update_Source__c: #[payload.event.Update_Source__c]" />
      </when>
      <otherwise>
        <ee:transform doc:name="Ensure Update_Source__c">
          <ee:message>
            <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  event: payload.event ++ {
    Update_Source__c: (payload.event.Update_Source__c default null) as String default "NextGen Office"
  },
  eventId: payload.eventId,
  replayId: payload.replayId
}
]]></ee:set-payload>
          </ee:message>
        </ee:transform>
        <choice doc:name="Route by EventType__c">
          <when expression="#[payload.event.Event_Type__c == 'S12']">
            <ee:transform doc:name="To HL7 SIU^S12">
              <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output text/plain
import buildSIU_S12 from dwl::hl7::siu
---
buildSIU_S12(payload.event)
    ]]></ee:set-payload>
              </ee:message>
            </ee:transform>
            <logger level="INFO" doc:name="HL7 Message Logger" message="HL7 MESSAGE GENERATED (correlationId: #[vars.correlationId]):&#10;#[payload]" />
            
            <!-- Generate a unique filename -->
            <set-variable variableName="filename" value='#["SIU12_" ++ uuid() ++ ".hl7"]' doc:name="Set filename" />
            
            <!-- Set local file path variable -->
            <set-variable variableName="hl7FilePath" value="#['C:\\Users\\ychri\\Desktop\\foresthms\\toNGO\\SIU\\' ++ vars.filename]" doc:name="Set HL7 File Path" />
            
            <!-- Write to local file -->
            <file:write doc:name="Write HL7 to File" path="#[vars.hl7FilePath]" />
            
            <!-- SFTP upload step -->
            <logger level="INFO" doc:name="SFTP Upload Start" message="Uploading to SFTP: #[vars.filename] (correlationId: #[vars.correlationId])" />
            <sftp:write doc:name="Upload to SFTP" config-ref="SFTP_Config" path="#['/foresthms/toNGO/SIU/' ++ vars.filename]">
                <sftp:content><![CDATA[#[payload]]]></sftp:content>
            </sftp:write>
            <logger level="INFO" doc:name="SFTP Upload Complete" message="Successfully uploaded to SFTP: #[vars.filename] (correlationId: #[vars.correlationId])" />
            
            <choice doc:name="NextGen Switch">
              <when expression="#[vars.sentToNextgen]">
                <!-- Send HL7 to NextGen API -->
                <logger level="INFO" doc:name="NextGen Outbound" message="Sending HL7 message to NextGen API, switch is ON (correlationId: #[vars.correlationId])" />
                <until-successful maxRetries="3" millisBetweenRetries="1000">
                  <logger level="INFO" doc:name="HL7 body to NextGen" message="HL7 body to NextGen: #[payload]" />
                  <ee:transform doc:name="Fix HL7 Endlines">
                    <ee:message>
                      <ee:set-payload><![CDATA[
%dw 2.0
output text/plain
---
(trim(payload as String)
  replace "\r\n" with "\r"
  replace "\n" with "\r")
                      ]]></ee:set-payload>
                    </ee:message>
                  </ee:transform>
                </until-successful>
              </when>
              <otherwise>
                <logger level="INFO" doc:name="NextGen Outbound" message="Not sending HL7 message to NextGen API, switch is OFF. HL7 message was logged to console only." />
              </otherwise>
            </choice>
          </when>

          <when expression="#[payload.event.Event_Type__c == 'S15']">
            <ee:transform doc:name="To HL7 SIU^S15">
              <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output text/plain
import buildSIU_S15 from dwl::hl7::siu
---
buildSIU_S15(payload.event)
    ]]></ee:set-payload>
              </ee:message>
            </ee:transform>
            <logger level="INFO" doc:name="HL7 Message Logger" message="HL7 MESSAGE GENERATED (correlationId: #[vars.correlationId]):&#10;#[payload]" />
            
            <!-- Generate a unique filename -->
            <set-variable variableName="filename" value='#["SIU15_" ++ uuid() ++ ".hl7"]' doc:name="Set filename" />
            
            <!-- Set local file path variable -->
            <set-variable variableName="hl7FilePath" value="#['C:\\Users\\ychri\\Desktop\\foresthms\\toNGO\\SIU\\' ++ vars.filename]" doc:name="Set HL7 File Path" />
            
            <!-- Write to local file -->
            <file:write doc:name="Write HL7 to File" path="#[vars.hl7FilePath]" />
            
            <!-- SFTP upload step -->
            <logger level="INFO" doc:name="SFTP Upload Start" message="Uploading to SFTP: #[vars.filename] (correlationId: #[vars.correlationId])" />
            <sftp:write doc:name="Upload to SFTP" config-ref="SFTP_Config" path="#['/foresthms/toNGO/SIU/' ++ vars.filename]">
              <sftp:content><![CDATA[#[payload]]]></sftp:content>
            </sftp:write>
            <logger level="INFO" doc:name="SFTP Upload Complete" message="Successfully uploaded to SFTP: #[vars.filename] (correlationId: #[vars.correlationId])" />
            
            <choice doc:name="NextGen Switch">
              <when expression="#[vars.sentToNextgen]">
                <!-- Send HL7 to NextGen API -->
                <logger level="INFO" doc:name="NextGen Outbound" message="Sending HL7 message to NextGen API, switch is ON (correlationId: #[vars.correlationId])" />
                <until-successful maxRetries="3" millisBetweenRetries="1000">
                  <logger level="INFO" doc:name="HL7 body to NextGen" message="HL7 body to NextGen: #[payload]" />
                  <ee:transform doc:name="Fix HL7 Endlines">
                    <ee:message>
                      <ee:set-payload><![CDATA[
%dw 2.0
output text/plain
---
trim(payload) replace "\n" with "\r"
                      ]]></ee:set-payload>
                    </ee:message>
                  </ee:transform>
                </until-successful>
              </when>
              <otherwise>
                <logger level="INFO" doc:name="NextGen Outbound" message="Not sending HL7 message to NextGen API, switch is OFF. HL7 message was logged to console only." />
              </otherwise>
            </choice>
          </when>

          <when expression="#[payload.event.Event_Type__c == 'S14']">
            <ee:transform doc:name="To HL7 SIU^S14">
              <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output text/plain
import buildSIU_S14 from dwl::hl7::siu
---
buildSIU_S14(payload.event)
              ]]></ee:set-payload>
              </ee:message>
            </ee:transform>
            <logger level="INFO" doc:name="HL7 Message Logger" message="HL7 MESSAGE GENERATED (correlationId: #[vars.correlationId]):&#10;#[payload]" />
            <set-variable variableName="filename" value='#["SIU14_" ++ uuid() ++ ".hl7"]' doc:name="Set filename" />
            <set-variable variableName="hl7FilePath" value="#['C:\\Users\\ychri\\Desktop\\foresthms\\toNGO\\SIU\\' ++ vars.filename]" doc:name="Set HL7 File Path" />
            <file:write doc:name="Write HL7 to File" path="#[vars.hl7FilePath]" />
            <logger level="INFO" doc:name="SFTP Upload Start" message="Uploading to SFTP: #[vars.filename] (correlationId: #[vars.correlationId])" />
            <sftp:write doc:name="Upload to SFTP" config-ref="SFTP_Config" path="#['/foresthms/toNGO/SIU/' ++ vars.filename]">
              <sftp:content><![CDATA[#[payload]]]></sftp:content>
            </sftp:write>
            <logger level="INFO" doc:name="SFTP Upload Complete" message="Successfully uploaded to SFTP: #[vars.filename] (correlationId: #[vars.correlationId])" />
            <choice doc:name="NextGen Switch">
              <when expression="#[vars.sentToNextgen]">
                <logger level="INFO" doc:name="NextGen Outbound" message="Sending HL7 message to NextGen API, switch is ON (correlationId: #[vars.correlationId])" />
                <until-successful maxRetries="3" millisBetweenRetries="1000">
                  <logger level="INFO" doc:name="HL7 body to NextGen" message="HL7 body to NextGen: #[payload]" />
                  <ee:transform doc:name="Fix HL7 Endlines">
                    <ee:message>
                      <ee:set-payload><![CDATA[
%dw 2.0
output text/plain
---
(trim(payload as String)
  replace "\r\n" with "\r"
  replace "\n" with "\r")
                      ]]></ee:set-payload>
                    </ee:message>
                  </ee:transform>
                </until-successful>
              </when>
              <otherwise>
                <logger level="INFO" doc:name="NextGen Outbound" message="Not sending HL7 message to NextGen API, switch is OFF. HL7 message was logged to console only." />
              </otherwise>
            </choice>
          </when>

          <otherwise>
            <logger doc:name="Debug Payload Type" level="WARN" message="(DEBUG) Payload type: #[payload.class], value: #[payload]" />
            <logger doc:name="Unknown EventType - Skipped" level="WARN" message="Skipped NextGenServiceAppointment__e: unknown EventType: #[payload.event.Event_Type__c]" />
          </otherwise>
        </choice>
      </otherwise>
    </choice>
    <error-handler>
      <on-error-propagate type="ANY">
        <set-variable variableName="errorMessage" value="#[(error.description)]" />
        <set-variable variableName="exceptionMessage" value="#[(error.errorMessage)]" />
        <set-variable variableName="exceptionType" value="#[(error.errorType)]" />
        <set-variable variableName="exceptionStackTrace" value="#[(error.stackTrace)]" />
        <set-variable variableName="originLocation" value="#[(flow.name)]" />
        <set-variable variableName="apiName" value="sfnextgen-v2" />
        <set-variable variableName="actionName" value="#[(attributes.method)]" />
        <set-variable variableName="httpRequestUrl" value="#[(attributes.requestPath)]" />
        <set-variable variableName="httpRequestMethod" value="#[(attributes.method)]" />
        <set-variable variableName="httpRequestHeaders" value="#[(attributes.headers)]" />
        <set-variable variableName="httpRequestBody" value="#[(payload)]" />
        <set-variable variableName="httpResponseStatusCode" value="#[(attributes.statusCode)]" />
        <set-variable variableName="httpResponseStatus" value="#[(attributes.reasonPhrase)]" />
        <set-variable variableName="httpResponseHeaders" value="#[(attributes.headers)]" />
        <set-variable variableName="httpResponseBody" value="#[(payload)]" />
        <set-variable variableName="sourceIp" value="#[(attributes.remoteAddress)]" />
        <flow-ref name="publish-logentryevent-error" />
        <logger level="ERROR" message="Error in SIU flow, correlationId: #[vars.correlationId], error: #[error.description]" />
        <file:write path="deadletter/#[vars.correlationId].err" />
      </on-error-propagate>
    </error-handler>
  </flow>

  <!-- HTTP POST listener for /api/nextgenemr -->
  <flow name="api-nextgenemr-post">
    <http:listener config-ref="Listener-config" path="/api/nextgenemr" allowedMethods="POST"/>
    <!-- Add your processing logic here -->
    <set-payload value="Received POST to /api/nextgenemr"/>
  </flow>

  <!-- LogEntryEvent__e Error Logging Sub-Flow -->
  <sub-flow name="publish-logentryevent-error">
    <ee:transform doc:name="Build LogEntryEvent__e Payload">
      <ee:message>
        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
[{
  TransactionEntryNumber__c: 1,
  TransactionId__c: vars.correlationId default correlationId default uuid(),
  Timestamp__c: now() as Number {unit: "milliseconds"},
  CreatedDate: now() as Number {unit: "milliseconds"},
  CreatedById: "005500000063g48AAA",
  Message__c: vars.errorMessage default error.description default "Unknown error",
  LoggingLevel__c: "ERROR",
  ExceptionMessage__c: vars.exceptionMessage default error.errorMessage default error.description default "",
  ExceptionType__c: vars.exceptionType default error.errorType default "MuleError",
  ExceptionStackTrace__c: vars.exceptionStackTrace default error.stackTrace default "",
  OriginType__c: "MuleSoft",
  OriginLocation__c: vars.originLocation default flow.name default "UnknownFlow",
  OriginSourceApiName__c: vars.apiName default "sfnextgen-v2",
  OriginSourceActionName__c: vars.actionName default attributes.method default "",
  HttpRequestEndpointAddress__c: vars.httpRequestUrl default attributes.requestPath default "",
  HttpRequestMethod__c: vars.httpRequestMethod default attributes.method default "",
  HttpRequestHeaders__c: vars.httpRequestHeaders default attributes.headers default {},
  HttpRequestBody__c: vars.httpRequestBody default payload default "",
  HttpResponseStatusCode__c: if (vars.httpResponseStatusCode != null and vars.httpResponseStatusCode != "") vars.httpResponseStatusCode as Number else null,
  HttpResponseStatus__c: vars.httpResponseStatus default attributes.reasonPhrase default "",
  HttpResponseHeaders__c: vars.httpResponseHeaders default attributes.headers default {},
  HttpResponseBody__c: vars.httpResponseBody default payload default "",
  RequestId__c: vars.correlationId default correlationId default uuid(),
  SourceIp__c: vars.sourceIp default attributes.remoteAddress default "",
  OrganizationId__c: p('mule.env') default "",
  OrganizationName__c: p('mule.env') default "",
  Tags__c: "mulesoft;integration;api-failure"
}]
]]></ee:set-payload>
      </ee:message>
    </ee:transform>
    <salesforce-pub-sub:publish-event
      config-ref="Pubsub-config"
      topic="/event/LogEntryEvent__e"
      doc:name="Publish LogEntryEvent__e"/>
  </sub-flow>
</mule>