<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:snowflake="http://www.mulesoft.org/schema/mule/snowflake"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:s3="http://www.mulesoft.org/schema/mule/s3" xmlns:os="http://www.mulesoft.org/schema/mule/os" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/snowflake http://www.mulesoft.org/schema/mule/snowflake/current/mule-snowflake.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
	<flow name="delta-flow" doc:id="2cabce1c-eb39-4d4e-90a9-4e0c3f920bca" maxConcurrency="1">
		<os:store doc:name="Store DeltaFlowState as Running" doc:id="94ff15dc-7b6a-4d28-9ccf-afe7c010f07e" key="DeltaFlowState">
			<os:value ><![CDATA[Running]]></os:value>
		</os:store>
		<logger level="INFO" doc:name="LOG Delta Flow Implementation Started" doc:id="e03c1068-5d83-4a36-aeee-97ce94b397d1" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "Delta flow started successfully"&#10;}]'/>
		<os:retrieve doc:name="Retrieve Date" doc:id="19cde592-43db-42a5-8700-18dd510e3d4a" key="oldTimeStamp" target="retreievedDate" >
			<os:default-value ><![CDATA[#[p('timestampfromonetimeload')]]]></os:default-value>
		</os:retrieve>
		<logger level="INFO" doc:name="LOG INFO Retrieved Date" doc:id="d0cddf71-6147-4506-a0fb-03699b17e3c9" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "Retrieved date is " ++ vars.retreievedDate&#10;}]'/>
		<salesforce:query doc:name="GET SF All Objects" doc:id="23fb7f4f-5790-44d5-8a2c-00b686442db8" config-ref="Salesforce_Config_client" target="objects" >
			<salesforce:salesforce-query ><![CDATA[SELECT QualifiedApiName FROM EntityDefinition WHERE IsCustomizable = true AND IsSubtype = false AND IsIdEnabled = true AND IsDeprecatedAndHidden = false ORDER BY QualifiedApiName ASC]]></salesforce:salesforce-query>
		</salesforce:query>
		<ee:dynamic-evaluate doc:name="DW Set Fetch Object List" doc:id="55369125-27ac-4032-8dc5-db1c3e79ccaf" expression='#[readUrl ("classpath://dwl/var-fetching-object-list.dwl","text/plain")]'/>
		<logger level="INFO" doc:name="LOG Fetch Object List" doc:id="723e5b97-d50c-4e6a-9f1c-0703b9a671b6" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" :  sizeOf(payload) ++ " Objects are fetched successfully from salesforce"&#10;}]'/>
		<until-successful maxRetries="${aws.s3.count}" doc:name="retry-mechanism-for-s3-exception-list" doc:id="fd7dba3c-2ac3-43a4-b8fa-7abe063ad5f3" millisBetweenRetries="${aws.s3.frequency}">
			<s3:get-object doc:name="GET Exception List" doc:id="ed2e3809-fcb3-4cc6-a2c1-2610152991e2" config-ref="Amazon_S3_Configuration" bucketName="${bucketname}" key="exceptionList.json" outputMimeType="application/json" target="exceptionList" />
		</until-successful>
		<ee:dynamic-evaluate doc:name="DW Set Filter Exception list" doc:id="a70e3002-8966-413c-988a-7c5c3f776d93" expression='#[readUrl ("classpath://dwl/var-filtering-exception-list-from-payload.dwl","text/plain")]'/>
		<logger level="INFO" doc:name="LOG Fetched And Filtering Exception" doc:id="dac9ba4d-803d-4a58-a799-01cb74066360" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "Filtering exception list is done from list of objects. After filtering the size of objects are " ++ sizeOf(payload)&#10;}]'/>
		<set-variable value="#[now() as String {format: &quot;yyyy-MM-dd'T'HH:mm:ss.SSS'Z'&quot;} &gt;&gt; &quot;America/Chicago&quot;]" doc:name="SET Var Current Time Stamp" doc:id="65e28b99-3b7c-4949-8b44-ecbd6ade1860" variableName="currentTimeStamp" />
		<set-variable value='#[%dw 2.0&#10;output application/json&#10;import * from dw::core::Strings&#10;---&#10;vars.currentTimeStamp substringBeforeLast ("-") replace ":" with("-") ++ ".json"]' doc:name="SET Var Current Time Stamp Modification" doc:id="1a9b6b21-5049-43c4-bb79-a2c4bb8cffac" variableName="currentTimeStampModification"/>
		<logger level="INFO" doc:name="LOG Current Time Stamp" doc:id="dc78f8cd-480d-49b7-961e-e7da033f25bb" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "Current time stamp is " ++ vars.currentTimeStamp&#10;}]'/>
		<foreach doc:name="For Each" doc:id="acdeae82-33eb-43a5-92f4-695d4ae31001" batchSize="${batchsize}">
			<try doc:name="Try" doc:id="24225881-63b0-4931-8696-527eedbc62ab" >
				<logger level="INFO" doc:name="LOG Current Object" doc:id="85d41049-8849-482a-b042-a80a53fccfdb" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "Process is started for " ++ payload&#10;&#10;}]'/>
				<set-variable value="#[payload]" doc:name="SET Var Object Name" doc:id="e7f5d2bb-fc6c-46af-9e17-69cff91705bb" variableName="objectName" />
				<salesforce:describe-sobject type="#[vars.objectName]" doc:name="GET SF Object Fields" doc:id="abea68fc-d787-4c4c-bdb9-50dcb5350315" config-ref="Salesforce_Config_client" />
				<ee:dynamic-evaluate doc:name="DW Set Fetch Fields List" doc:id="5089228f-f75e-4908-8141-3868351a23d8" expression='#[readUrl ("classpath://dwl/var-fetching-all-fields-from-object.dwl","text/plain")]' />
				<logger level="INFO" doc:name="LOG Fields Fetched " doc:id="2ab9840a-2dd0-4a51-b2bd-7a4219dad487" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "Fields fetched successfully from " ++ vars.objectName&#10;}]'/>
				<set-variable value='#[%dw 2.0&#10;import * from dw::core::Strings&#10;output application/json&#10;---&#10;"select " ++ payload ++ " from " ++ vars.objectName ++" where LastModifiedDate &gt; " ++ vars.retreievedDate ++ " and LastModifiedDate &lt;= " ++ vars.currentTimeStamp]' doc:name="SET Var Construct Soql Query" doc:id="e9584c88-3185-488e-bf8c-d5690557dd5f" variableName="query" />
				<salesforce:query doc:name="GET SF Object Payload" doc:id="39203bb7-0f5a-43e7-b139-2ffa19bb1369" config-ref="Salesforce_Config_client" target="result">
					<salesforce:salesforce-query><![CDATA[#[vars.query]]]></salesforce:salesforce-query>
				</salesforce:query>
				<ee:transform doc:name="DW SET Payload To Json" doc:id="8e6974be-23bc-45d7-abbd-056734ed5df5" >
					<ee:message >
						<ee:set-payload resource="dwl/var-object-data-to-json.dwl" />
					</ee:message>
				</ee:transform>
				<until-successful maxRetries="${aws.s3.count}" doc:name="retry-mechanism-for-s3-upload" doc:id="5a8360e1-b470-4631-b7aa-c59d9ff5afb8" millisBetweenRetries="${aws.s3.frequency}">
					<s3:put-object doc:name="POST Processed Objects" doc:id="ebc802ca-7394-4a43-adaa-f47f69ea7a25" config-ref="Amazon_S3_Configuration" bucketName="${bucketname}" key='#["delta/success-objects/"  ++ vars.objectName ++ "_" ++ vars.currentTimeStampModification]' contentLength="#[payload.^contentLength]"/>
				</until-successful>
				<logger level="INFO" doc:name="LOG POST Acknowledge Object" doc:id="604f21b2-83d0-4d95-95b3-c0ee1ce4dad2" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "Successfully fetched data and also uploaded to s3 is completed for " ++ vars.objectName&#10;}]'/>
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="494bd735-d32f-44c1-a89c-0baadbd51e44" type="SALESFORCE:INSUFFICIENT_PERMISSIONS, SALESFORCE:INVALID_INPUT, SALESFORCE:LIMIT_EXCEEDED, SALESFORCE:OPERATION_NOT_SUPPORTED">
						<set-variable value='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"ObjectName": vars.objectName,&#10;	"ErrorDescription": error.detailedDescription&#10;}]' doc:name="SET Var Salesforce Error Queries" doc:id="222f380d-b39c-427d-b3bf-c8f51ee0f873" variableName="salesforceErrorQueriesDelta" />
						<file:write doc:name="Write SF Error Queries List" doc:id="15b4f9e3-bf64-445c-861f-0e3e67c66013" config-ref="File_Config_cloudhub" path='#["salesforce error queries in delta" ++ "_" ++ vars.currentTimeStampModification]' mode="APPEND">
							<file:content><![CDATA[#[vars.salesforceErrorQueriesDelta]]]></file:content>
						</file:write>
						<logger level="INFO" doc:name="LOG POST Acknowledge Error Object" doc:id="d1fa61a0-a7fc-42a7-b3e4-30b68b295675" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "Getting error, while fetching data from " ++ vars.objectName ++ " object"&#10;}]'/>
					</on-error-continue>
				</error-handler>
			</try>
		</foreach>
		<os:store doc:name="Store Date " doc:id="1680a439-14c7-4ade-abac-85f1717a224d" key="oldTimeStamp" >
			<os:value ><![CDATA[#[vars.currentTimeStamp]]]></os:value>
		</os:store>
		<file:read doc:name="Read SF Error Queries List" doc:id="4438a099-9b97-47d5-8e1d-174d2b6995ee" config-ref="File_Config_cloudhub" path='#["salesforce error queries in delta" ++ "_" ++ vars.currentTimeStampModification]' outputMimeType="text/plain" target="salesforceErrorQueriesListDelta" />
		<until-successful maxRetries="${aws.s3.count}" doc:name="retry-mechanism-for-s3-upload" doc:id="b9cca1e4-51a2-4261-95c7-10fcbaad3706" millisBetweenRetries="${aws.s3.count}">
			<s3:put-object doc:name="POST Error Objects" doc:id="2571816d-2906-4bb0-b021-02fec1c00c29" config-ref="Amazon_S3_Configuration" bucketName="${bucketname}" key='#["delta/error-objects/" ++ "salesforceErrorQueriesDelta" ++ "_" ++ vars.currentTimeStampModification]'>
			<s3:content><![CDATA[#[vars.salesforceErrorQueriesListDelta]]]></s3:content>
		</s3:put-object>
		</until-successful>
		<logger level="INFO" doc:name="LOG Statistics" doc:id="756c90a5-4fe3-4fe7-b8a5-6aedd8c2195f" message='#[%dw 2.0&#10;output application/json&#10;import * from dw::core::Strings&#10;var a ={&#10;	"Total fetched objects from salesforce": sizeOf(vars.objects),&#10;	"Exception objects": sizeOf(vars.exceptionList),&#10;	"Processed Objects": ((sizeOf(vars.objects)) - (vars.salesforceErrorQueriesListDelta countMatches  "ObjectName") - (sizeOf(vars.exceptionList))),&#10;    "Failed objects":  vars.salesforceErrorQueriesListDelta countMatches  "ObjectName" &#10;}&#10;---&#10;&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : a&#10;}]'/>
		<logger level="INFO" doc:name="LOG Delta Flow Implementation Ended" doc:id="f31709ea-8ad9-42f4-b68a-ef2b90e18f85" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "Delta flow is ended successfully"&#10;}]'/>
		<os:store doc:name="Store DeltaFlowState as Finished" doc:id="f3c20386-fc21-4eb2-a54a-5e4b00e6a2fd" key="DeltaFlowState">
			<os:value ><![CDATA[Finished]]></os:value>
		</os:store>
		<error-handler ref="global-error-handlerError_Handler" />
</flow>
<flow name="create-clinical-encounters" doc:id="5af30118-2ae3-4e67-a736-43b362eaead0" maxConcurrency="1">
		<scheduler doc:name="Trigger Create Clinical Encounters Flow Every 1 minute" doc:id="487d2ed5-cfc9-4c06-a77d-55f9cb701bfd" >
			<scheduling-strategy >
				<fixed-frequency frequency="1" timeUnit="MINUTES"/>
			</scheduling-strategy>
		</scheduler>
		<os:retrieve doc:name="Retrieve DeltaFlowState value" doc:id="a574ce7a-2291-4878-80ca-b5208b924499" key="DeltaFlowState" target="deltaFlowState">
			<os:default-value ><![CDATA[#[""]]]></os:default-value>
		</os:retrieve>
		<choice doc:name="Is delta-flow running?" doc:id="5b57e572-f250-4392-8b86-057bb25ee40e" >
			<when expression='#[%dw 2.0&#10;output application/java&#10;---&#10;(vars.deltaFlowState default "") == "Running"]'>
				<logger level="INFO" doc:name="Log delta app currently running" doc:id="d7d09233-3cf0-4555-96fb-504e430843b2" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "This flow can not run because the delta-flow is currently running"&#10;}]'/>
			</when>
			<otherwise >
				<os:retrieve doc:name="Retrieve encounterCacheObject" doc:id="c04e7e88-ba9e-410a-a10e-03f2f75b008d" key="encounterCacheObject" target="encounterCacheObject">
			<os:default-value><![CDATA[#[%dw 2.0
output application/json
---
{
	"LastHarvestDateTime": null,
	"EncounterId": null,
	"DataSource": null
}]]]></os:default-value>
		</os:retrieve>
				<set-variable value="#[%dw 2.0&#10;import p from Mule&#10;output application/java&#10;---&#10;(p('encounterBatchSize') default 200) as Number]" doc:name="encounterBatchSize" doc:id="c4ecfa6c-c6a9-43eb-975b-43d40b16b6ba" variableName="encounterBatchSize"/>
				<set-variable value="#[%dw 2.0&#10;import p from Mule&#10;output text/plain&#10;&#10;var sql = &quot;SELECT TOP $(vars.encounterBatchSize default 200)&#10;	ENCOUNTER_ID,&#10;	PATIENT_ID,&#10;	ENCOUNTER_TYPE,&#10;	TO_CHAR(ENCOUNTER_START_DATE) AS ENCOUNTER_START_DATE,&#10;	TO_CHAR(ENCOUNTER_END_DATE) AS ENCOUNTER_END_DATE,&#10;	ENCOUNTER_STATUS,&#10;	LENGTH_OF_STAY,&#10;	ADMIT_SOURCE_CODE,&#10;	ADMIT_SOURCE_DESCRIPTION,&#10;	DISCHARGE_DISPOSITION_CODE,&#10;	DISCHARGE_DISPOSITION_DESCRIPTION,&#10;	ATTENDING_PROVIDER_NPI,&#10;	FACILITY_NPI,&#10;	FACILITY_NAME,&#10;	PRIMARY_DIAGNOSIS_CODE_TYPE,&#10;	PRIMARY_DIAGNOSIS_CODE,&#10;	PRIMARY_DIAGNOSIS_DESCRIPTION,&#10;	PATIENT_TIER,&#10;	BAMBOO_MOBILE_PHONE,&#10;	BAMBOO_HOME_PHONE,&#10;	BAMBOO_PATIENT_PHONE,&#10;	MNEAS_PATIENT_PHONE,&#10;	MNEAS_HOME_PHONE,&#10;	MNEAS_CELL_PHONE,&#10;	MNEAS_WORK_PHONE,&#10;	READMISSION_FLAG,&#10;	INDEX_ADMISSION,&#10;	DATA_SOURCE,&#10;	TUVA_LAST_RUN,&#10;	MD5(IFNULL(ADMIT_SOURCE_CODE,'')&#10;||IFNULL(ADMIT_SOURCE_DESCRIPTION,'')&#10;||IFNULL(ATTENDING_PROVIDER_NPI,'')&#10;||IFNULL(BAMBOO_HOME_PHONE,'')&#10;||IFNULL(BAMBOO_MOBILE_PHONE,'')&#10;||IFNULL(BAMBOO_PATIENT_PHONE,'')&#10;||IFNULL(DISCHARGE_DISPOSITION_CODE,'')&#10;||IFNULL(DISCHARGE_DISPOSITION_DESCRIPTION,'')&#10;||IFNULL(ENCOUNTER_START_DATE,'1900-01-01')&#10;||IFNULL(ENCOUNTER_END_DATE,'1900-01-01')&#10;||IFNULL(ENCOUNTER_STATUS,'')&#10;||IFNULL(ENCOUNTER_TYPE,'')&#10;||IFNULL(FACILITY_NAME,'')&#10;||IFNULL(FACILITY_NPI,'')&#10;||IFNULL(INDEX_ADMISSION,'')&#10;||IFNULL(LENGTH_OF_STAY,-1)&#10;||IFNULL(MNEAS_CELL_PHONE,'')&#10;||IFNULL(MNEAS_HOME_PHONE,'')&#10;||IFNULL(MNEAS_PATIENT_PHONE,'')&#10;||IFNULL(MNEAS_WORK_PHONE,'')&#10;||IFNULL(PATIENT_TIER,'')&#10;||IFNULL(PRIMARY_DIAGNOSIS_CODE,'')&#10;||IFNULL(PRIMARY_DIAGNOSIS_CODE_TYPE,'')&#10;||IFNULL(PRIMARY_DIAGNOSIS_DESCRIPTION,'')&#10;||IFNULL(READMISSION_FLAG,-1)) AS MD5Hash&#10;FROM&#10;	TCM_TRANSITION&#10;WHERE&#10;	IFNULL(ENCOUNTER_END_DATE, current_date) &gt;= DATEADD(Day ,-($(p('encounterDischargeDaysBack') default 2)), current_date)&quot;&#10;	&#10;	var appendedSql =&#10;		if (!isEmpty(vars.encounterCacheObject.LastHarvestDateTime) and !isEmpty(vars.encounterCacheObject.DataSource) and !isEmpty(vars.encounterCacheObject.EncounterId))&#10;			sql ++ &quot;&#10;				AND TUVA_LAST_RUN = '$(vars.encounterCacheObject.LastHarvestDateTime)'&#10;				AND (&#10;						LOWER(DATA_SOURCE) &gt; LOWER('$(vars.encounterCacheObject.DataSource)')&#10;						OR (&#10;								LOWER(ENCOUNTER_ID) &gt; LOWER('$(vars.encounterCacheObject.EncounterId)')&#10;								AND LOWER(DATA_SOURCE) = LOWER('$(vars.encounterCacheObject.DataSource)')&#10;							)&#10;					)&quot;&#10;		else sql ++ &quot; AND TUVA_LAST_RUN &gt; '$(vars.encounterCacheObject.LastHarvestDateTime default &quot;1900-01-01&quot;)'&quot;&#10;		&#10;	var finalQuery = appendedSql ++ &quot; ORDER BY TUVA_LAST_RUN, DATA_SOURCE, ENCOUNTER_ID asc;&quot;&#10;---&#10;finalQuery]" doc:name="selectEncounterSql" doc:id="a607d55e-1f19-4dee-9f49-a51bbc0ce2f5" variableName="selectEncounterSql" />
				<snowflake:select doc:name="Select encounters" doc:id="5c0f5a0f-c0be-411a-bd82-4a7b4eaa88b8" config-ref="Herself_Health_Snowflake_Config" target="encounters">
					<snowflake:sql><![CDATA[#[vars.selectEncounterSql]]]></snowflake:sql>
						</snowflake:select>
				<choice doc:name="Are there any encounters?" doc:id="f2368036-3ab6-49bd-9e4b-8fa2c557af6e">
					<when expression="#[sizeOf(vars.encounters) == 0]">
						<os:store doc:name="Reset encounter cache object EncounterId and DataSource" doc:id="ddc551cc-bc03-465a-bec7-bb7f45c8a62b" key="encounterCacheObject">
							<os:value ><![CDATA[#[%dw 2.0
output application/json
---
{
	"LastHarvestDateTime": vars.encounterCacheObject.LastHarvestDateTime,
	"EncounterId": null,
	"DataSource": null,
}]]]></os:value>
						</os:store>
					</when>
					<otherwise >
						<logger level="INFO" doc:name="Log job started" doc:id="ad4eed37-c698-4bfe-a257-183d041d8b30" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "create-clinical-encounters started..."&#10;}]' />
						<logger level="INFO" doc:name="Log number of encounters found" doc:id="5255dbbf-2ca1-4cd5-bd12-e6d103f113df" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "$(sizeOf(vars.encounters)) encounters selected"&#10;}]' />
						<http:request method="POST" doc:name="Get Salesforce OAuth Token" doc:id="ac78aaa4-2261-48e0-a957-2b30913e08f5" config-ref="Salesforce_Auth_HTTP_Request_configuration" path="/token">
							<http:body><![CDATA[#[%dw 2.0
import p from Mule
output application/x-www-form-urlencoded
---
{
	"grant_type": "password",
	"client_id": p('secure::sf.clientId'),
	"client_secret": p('secure::sf.clientSecret'),
	"username": p('sf.name'),
	"password": p('secure::sf.pwd') ++ p('secure::sf.token')
}]]]></http:body>
							<http:response-validator >
								<http:success-status-code-validator values="200" />
							</http:response-validator>
		</http:request>
						<set-variable value="#[payload.access_token]" doc:name="salesforceAccessToken" doc:id="c73f16d4-9c53-44f1-965e-c56a99c13504" variableName="salesforceAccessToken" />
						<parallel-foreach doc:name="Parallel For Each" doc:id="37ef4f26-309b-44a9-9709-6c2c6ae00fb9" maxConcurrency="50" collection="#[vars.encounters]">
							<try doc:name="Try" doc:id="5c695109-396c-4554-bf7d-67dfe55ac437">
						<logger level="INFO" doc:name="Log start of processing encounter" doc:id="e4f1d6c4-119c-420c-b339-3962d22317e7" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;	"EncounterId": payload.ENCOUNTER_ID default "",&#10;	"ElationPatientId": payload.PATIENT_ID default "",&#10;    "LogMessage" : "Processing encounter $(payload.ENCOUNTER_ID default "")..."&#10;}]' />
								<set-variable value="#[payload]" doc:name="encounter" doc:id="3a8db5a8-f2b2-4d64-b6e9-0bbd7ced51c9" variableName="encounter" />
								<validation:is-true doc:name="Validate encounter has PATIENT_ID" doc:id="e039b050-c8f8-4422-af28-f5abdaca6cd4" expression="#[!isEmpty(vars.encounter.PATIENT_ID)]" message="PATIENT_ID not found" />
								<db:select doc:name="Get encounter mapping from SQL cache" doc:id="7732d9be-5bb8-402d-b33f-2a1f573acf67" config-ref="Herself_Health_Database_Config">
									<non-repeatable-iterable />
									<db:sql ><![CDATA[SELECT TOP 1
	TuvaEncounterId,
	TuvaDataSource,
	SalesforceClinicalEncounterId,
	TuvaMd5Hash
FROM
	tuva_to_salesforce.EncounterMapping
WHERE
	TuvaEncounterId = :TuvaEncounterId
	AND TuvaDataSource = :DataSource]]></db:sql>
									<db:input-parameters ><![CDATA[#[{
	"TuvaEncounterId": vars.encounter.ENCOUNTER_ID,
	"DataSource": vars.encounter.DATA_SOURCE
}]]]></db:input-parameters>
								</db:select>
								<set-variable value="#[%dw 2.0&#10;output application/json&#10;---&#10;payload[0]]" doc:name="encounterMapping" doc:id="8b0b0a0f-1008-4853-bfd9-52f58787b045" variableName="encounterMapping"/>
								<choice doc:name="MD5 hash exists?" doc:id="cdc176f6-1182-4e3e-b453-e609ee1b4693" >
									<when expression="#[!isEmpty(vars.encounterMapping.TuvaMd5Hash) and vars.encounterMapping.TuvaMd5Hash == vars.encounter.Md5Hash]">
										<logger level="INFO" doc:name="Log skipping encounter" doc:id="e2204960-7889-45c7-b129-a0715065ff68" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;	"EncounterId": vars.encounter.ENCOUNTER_ID default "",&#10;	"ElationPatientId": vars.encounter.PATIENT_ID default "",&#10;    "LogMessage" : "Skipping encounter because the MD5 hash already exists"&#10;}]'/>
									</when>
									<otherwise >
										<salesforce:query doc:name="Lookup Account by MRN" doc:id="0e03acac-ba74-49bb-9ccc-a835baf54bc7" config-ref="Salesforce_Config_client">
											<reconnect />
											<salesforce:salesforce-query><![CDATA[SELECT
	Id
FROM
	Account
WHERE
	HealthCloudGA__MedicalRecordNumber__pc = ':PATIENT_ID'
	AND IsPersonAccount = TRUE]]></salesforce:salesforce-query>
									<salesforce:parameters><![CDATA[#[output application/java
---
{
	"PATIENT_ID" : vars.encounter.PATIENT_ID
}]]]></salesforce:parameters>
								</salesforce:query>
										<set-variable value='#[payload[0].Id default ""]' doc:name="accountId" doc:id="a0511462-db0f-40c5-b304-904a16597892" variableName="accountId"/>
										<validation:is-true doc:name="Validate Account exists" doc:id="4d80d055-196c-4609-8ef0-0728c9fdf2f7" expression="#[!isEmpty(vars.accountId)]" message="Account not found in Salesforce" />
										<ee:transform doc:name="Encounter to ClinicalEncounter" doc:id="3ad9f4e6-73fa-4493-aca6-fb960614e6d3">
									<ee:message>
										<ee:set-payload><![CDATA[%dw 2.0
import p from Mule
import mapEncounterToClinicalEncounter from dwl::mappings
		
output application/json  skipNullOn = "everywhere"
---
mapEncounterToClinicalEncounter(vars.encounter, vars.encounterMapping.SalesforceClinicalEncounterId default "", vars.accountId, p('sf.clinicalEncounter.defaultRecordTypeId') as String)]]></ee:set-payload>
									</ee:message>
								</ee:transform>
										<flow-ref doc:name="UpsertClinicalEncounterToSalesforce" doc:id="57066ef1-f97e-419e-a7ae-6c121799b00e" name="UpsertClinicalEncounterToSalesforce" />
										<set-variable value='#[payload.id]' doc:name="clinicalEncounterId" doc:id="7fec41c0-55fb-44c0-93c9-688b31109b2a" variableName="clinicalEncounterId" />
										<flow-ref doc:name="UpsertEncounterMapping" doc:id="fe50f578-c4a8-4660-9e8b-928527cf47c8" name="UpsertEncounterMapping"/>
									</otherwise>
								</choice>
								<logger level="INFO" doc:name="Log end of processing encounter" doc:id="0cbfd04d-30c9-44b8-877e-ec267140f3c0" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;	"EncounterId": vars.encounter.ENCOUNTER_ID default "",&#10;	"ElationPatientId": vars.encounter.PATIENT_ID default "",&#10;	"SalesforceAccountId": vars.accountId default "",&#10;    "LogMessage" : "...Finished processing encounter $(vars.encounter.ENCOUNTER_ID default "")"&#10;}]'/>
								<error-handler>
									<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="2540c842-c949-47ac-b879-db80153d16b9" >
										<logger level="INFO" doc:name="Log error details" doc:id="240e13b3-6cb8-4b8d-9a17-efe9d5a55931" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;	"EncounterId": vars.encounter.ENCOUNTER_ID default "",&#10;	"ElationPatientId": vars.encounter.PATIENT_ID default "",&#10;	"SalesforceAccountId": vars.accountId default "",&#10;    "LogMessage" : error.description&#10;}]' />
									</on-error-continue>
						
</error-handler>
					</try>

						</parallel-foreach>
						<choice doc:name="Is number of encounters less then batch size?" doc:id="ebc46bd2-5218-4b04-ad72-853d0b6850db">
							<when expression="#[sizeOf(vars.encounters) &lt; vars.encounterBatchSize]">
								<os:store doc:name="Reset encounter cache object EncounterId and DataSource" doc:id="cd7d8ee8-090a-4518-9387-b6e87454bc08" key="encounterCacheObject" >
									<os:value ><![CDATA[#[%dw 2.0
output application/json
var lastEncounter = vars.encounters[-1]
---
{
	"LastHarvestDateTime": lastEncounter.TUVA_LAST_RUN,
	"EncounterId": null,
	"DataSource": null,
}]]]></os:value>
								</os:store>
							</when>
							<otherwise >
								<os:store doc:name="Store encounter cache object" doc:id="ff9f1d8a-f9b0-41c4-b09f-b1dd061fc779" key="encounterCacheObject">
					<os:value><![CDATA[#[%dw 2.0
output application/json
var lastEncounter = vars.encounters[-1]
---
{
	"LastHarvestDateTime": lastEncounter.TUVA_LAST_RUN,
	"EncounterId": lastEncounter.ENCOUNTER_ID,
	"DataSource": lastEncounter.DATA_SOURCE,
}]]]></os:value>
				</os:store>
							</otherwise>
						</choice>
						<logger level="INFO" doc:name="Log job finished" doc:id="3809c0b9-1d51-463e-a0bf-52979d9fb4c9" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;    "LogMessage" : "...create-clinical-encounters finished"&#10;}]' />
					</otherwise>
				</choice>
			
</otherwise>
		</choice>
		<error-handler ref="global-error-handlerError_Handler" />
	</flow>
	<sub-flow name="UpsertClinicalEncounterToSalesforce" doc:id="22d2074d-6f99-4e9e-9838-56d101f27c20" >
		<choice doc:name="Is there a Salesforce ClinicalEncounter Id?" doc:id="3f72232e-a789-4e59-971f-04ad59490834" >
			<when expression='#[!isEmpty(payload.Id default "")]'>
				<set-variable value="#[payload.Id]" doc:name="id" doc:id="74808ad1-6a63-40c6-ab7a-4d6e4f175b6b" variableName="id"/>
				<ee:transform doc:name="Remove Id from payload" doc:id="0539dcc1-0b68-401e-ae33-0616da1b88cf">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload -"Id"]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<http:request method="PATCH" doc:name="Update ClinicalEncounter" doc:id="a5c7bc38-cbe7-4d45-8fab-f6c852303778" config-ref="Salesforce_REST_HTTP_Request_configuration" path="/sobjects/ClinicalEncounter/{id}">
					<http:headers ><![CDATA[#[output application/java
---
{
	"Authorization" : "Bearer " ++ vars.salesforceAccessToken
}]]]></http:headers>
					<http:uri-params ><![CDATA[#[output application/java
---
{
	"id" : vars.id
}]]]></http:uri-params>
				</http:request>
				<set-payload value="#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	id: vars.id&#10;}]" doc:name="Set Payload to Id" doc:id="17e87a4f-116c-4713-b2dd-d9b5c450c554" />
				<remove-variable doc:name="id" doc:id="a771faf7-7bf3-4fc7-8e5d-ebab4585fe78" variableName="id"/>
				<logger level="INFO" doc:name="Log ClinicalEncounter updated" doc:id="37c57d3d-fdad-4e73-b946-0c8112f41e58" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;	"EncounterId": vars.encounter.ENCOUNTER_ID default "",&#10;	"ElationPatientId": vars.encounter.PATIENT_ID default "",&#10;	"SalesforceAccountId": vars.accountId default "",&#10;    "LogMessage" : "ClinicalEncounter updated"&#10;}]'/>
			</when>
			<otherwise >
				<http:request method="POST" doc:name="Insert ClinicalEncounter" doc:id="4c40a9ea-a3b3-473b-9d41-ad55fbfa9d2b" config-ref="Salesforce_REST_HTTP_Request_configuration" path="/sobjects/ClinicalEncounter">
					<http:headers ><![CDATA[#[output application/java
---
{
	"Authorization" : "Bearer " ++ vars.salesforceAccessToken
}]]]></http:headers>
					<http:response-validator >
						<http:success-status-code-validator values="201" />
					</http:response-validator>
				</http:request>
				<logger level="INFO" doc:name="LogLog ClinicalEncounter inserted" doc:id="cd63370b-e764-4641-9c17-91ef934a2f8e" message='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;	"AppName": app.name,&#10;	"FlowName" : flow.name,&#10;	"EncounterId": vars.encounter.ENCOUNTER_ID default "",&#10;	"ElationPatientId": vars.encounter.PATIENT_ID default "",&#10;	"SalesforceAccountId": vars.accountId default "",&#10;    "LogMessage" : "ClinicalEncounter inserted"&#10;}]'/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="UpsertEncounterMapping" doc:id="dd78b49d-68a7-4c5f-bbf2-6db571748afd" >
		<choice doc:name="Does encounterMapping exist?" doc:id="18c68ed2-9acb-4889-a473-31cf185ae4f2" >
			<when expression="#[!isEmpty(vars.encounterMapping)]">
				<db:update doc:name="Update tuva_to_salesforce.EncounterMapping" doc:id="7c9ea79d-e44f-484f-8771-d1073d12a68a" config-ref="Herself_Health_Database_Config">
					<db:sql ><![CDATA[UPDATE tuva_to_salesforce.EncounterMapping
	SET TuvaMd5Hash = :TuvaMd5Hash
WHERE
	 TuvaEncounterId = :TuvaEncounterId
	 AND TuvaDataSource = :TuvaDataSource
	 AND SalesforceClinicalEncounterId = :SalesforceClinicalEncounterId]]></db:sql>
					<db:input-parameters ><![CDATA[#[{
	TuvaEncounterId: vars.encounterMapping.TuvaEncounterId,
	TuvaDataSource: vars.encounterMapping.TuvaDataSource,
	SalesforceClinicalEncounterId: vars.encounterMapping.SalesforceClinicalEncounterId,
	TuvaMd5Hash: vars.encounter.MD5HASH default ""
}]]]></db:input-parameters>
				</db:update>
			</when>
			<otherwise >
				<db:insert doc:name="Insert tuva_to_salesforce.EncounterMapping" doc:id="e5c3a13c-0411-4cdf-9bc3-322fa6374a1f" config-ref="Herself_Health_Database_Config">
					<db:sql ><![CDATA[INSERT INTO tuva_to_salesforce.EncounterMapping (TuvaEncounterId,TuvaDataSource,SalesforceClinicalEncounterId,TuvaMd5Hash)
VALUES (:TuvaEncounterId,:TuvaDataSource,:SalesforceClinicalEncounterId,:TuvaMd5Hash)]]></db:sql>
					<db:input-parameters ><![CDATA[#[{
	"TuvaEncounterId": vars.encounter.ENCOUNTER_ID,
	"TuvaDataSource": vars.encounter.DATA_SOURCE,
	"SalesforceClinicalEncounterId": vars.clinicalEncounterId,
	"TuvaMd5Hash": vars.encounter.MD5Hash
}]]]></db:input-parameters>
				</db:insert>
			</otherwise>
		</choice>
	</sub-flow>
</mule>
